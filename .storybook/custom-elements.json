{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/components/autocomplete/autocomplete.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdAutocomplete",
          "members": [
            {
              "kind": "field",
              "name": "searchInput",
              "type": {
                "text": "HTMLInputElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "loading",
              "type": "boolean",
              "default": false,
              "description": "override displayInput",
              "attribute": "loading"
            },
            {
              "kind": "field",
              "name": "loadingText",
              "type": "string",
              "default": "Loading...",
              "attribute": "loading-text"
            },
            {
              "kind": "method",
              "name": "getSearchInput",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleDocumentMouseDown",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleDocumentKeyDown",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleComboboxMouseDown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "selectionChanged",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleOpenChange",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderInput",
              "privacy": "protected",
              "description": "render the display input. to impelement the search, use the autocomplete component",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderListbox",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "filterOptions",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "filterText",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "typeToSelectString",
              "type": "string",
              "privacy": "protected",
              "default": "",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "typeToSelectTimeout",
              "type": "number",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "closeWatcher",
              "type": {
                "text": "CloseWatcher | null | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "popup",
              "type": "object",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "properties": {
                "anchorEl": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "cleanup": {},
                "popup": {
                  "description": "A reference to the internal popup container. Useful for animating and styling the popup with JavaScript.",
                  "$ref": "#/definitions/HTMLElement"
                },
                "arrowEl": {
                  "$ref": "#/definitions/HTMLElement"
                },
                "anchor": {
                  "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can provide the anchor\nelement `id`, a DOM element reference, or a `VirtualElement`. If the anchor lives inside the popup, use the\n`anchor` slot instead.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "string"
                    }
                  ]
                },
                "active": {
                  "description": "Activates the positioning logic and shows the popup. When this attribute is removed, the positioning logic is torn\ndown and the popup will be hidden.",
                  "type": "boolean",
                  "default": false
                },
                "placement": {
                  "description": "The preferred placement of the popup. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",
                  "enum": [
                    "bottom",
                    "bottom-end",
                    "bottom-start",
                    "left",
                    "left-end",
                    "left-start",
                    "right",
                    "right-end",
                    "right-start",
                    "top",
                    "top-end",
                    "top-start"
                  ],
                  "type": "string",
                  "default": "top"
                },
                "strategy": {
                  "description": "Determines how the popup is positioned. The `absolute` strategy works well in most cases, but if overflow is\nclipped, using a `fixed` position strategy can often workaround it.",
                  "enum": [
                    "absolute",
                    "fixed"
                  ],
                  "type": "string",
                  "default": "absolute"
                },
                "distance": {
                  "description": "The distance in pixels from which to offset the panel away from its anchor.",
                  "type": "number",
                  "default": 0
                },
                "skidding": {
                  "description": "The distance in pixels from which to offset the panel along its anchor.",
                  "type": "number",
                  "default": 0
                },
                "arrow": {
                  "description": "Attaches an arrow to the popup. The arrow's size and color can be customized using the `--arrow-size` and\n`--arrow-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",
                  "type": "boolean",
                  "default": false
                },
                "arrowPlacement": {
                  "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",
                  "enum": [
                    "anchor",
                    "center",
                    "end",
                    "start"
                  ],
                  "type": "string",
                  "default": "anchor"
                },
                "arrowPadding": {
                  "description": "The amount of padding between the arrow and the edges of the popup. If the popup has a border-radius, for example,\nthis will prevent it from overflowing the corners.",
                  "type": "number",
                  "default": 10
                },
                "flip": {
                  "description": "When set, placement of the popup will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",
                  "type": "boolean",
                  "default": false
                },
                "flipFallbackPlacements": {
                  "description": "If the preferred placement doesn't fit, popup will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead.",
                  "type": "string",
                  "default": ""
                },
                "flipFallbackStrategy": {
                  "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popup should be positioned using the best available fit based on available space or as it was initially\npreferred.",
                  "enum": [
                    "best-fit",
                    "initial"
                  ],
                  "type": "string",
                  "default": "best-fit"
                },
                "flipBoundary": {
                  "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Element"
                      }
                    }
                  ]
                },
                "flipPadding": {
                  "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur.",
                  "type": "number",
                  "default": 0
                },
                "shift": {
                  "description": "Moves the popup along the axis to keep it in view when clipped.",
                  "type": "boolean",
                  "default": false
                },
                "shiftBoundary": {
                  "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Element"
                      }
                    }
                  ]
                },
                "shiftPadding": {
                  "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur.",
                  "type": "number",
                  "default": 0
                },
                "autoSize": {
                  "description": "When set, this will cause the popup to automatically resize itself to prevent it from overflowing.",
                  "enum": [
                    "both",
                    "horizontal",
                    "vertical"
                  ],
                  "type": "string"
                },
                "sync": {
                  "description": "Syncs the popup's width or height to that of the anchor element.",
                  "enum": [
                    "both",
                    "height",
                    "width"
                  ],
                  "type": "string"
                },
                "autoSizeBoundary": {
                  "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Element"
                      }
                    }
                  ]
                },
                "autoSizePadding": {
                  "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",
                  "type": "number",
                  "default": 0
                },
                "hoverBridge": {
                  "description": "When a gap exists between the anchor and the popup element, this option will add a \"hover bridge\" that fills the\ngap using an invisible element. This makes listening for events such as `mouseenter` and `mouseleave` more sane\nbecause the pointer never technically leaves the element. The hover bridge will only be drawn when the popover is\nactive.",
                  "type": "boolean",
                  "default": false
                },
                "updateHoverBridge": {
                  "type": "object",
                  "additionalProperties": false
                },
                "dir": {
                  "type": "string",
                  "default": ""
                },
                "lang": {
                  "type": "string",
                  "default": ""
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "combobox",
              "type": {
                "text": "HTMLSlotElement | undefined"
              },
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "displayInput",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueInput",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "listbox",
              "type": {
                "text": "HTMLSlotElement | undefined"
              },
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelSlot",
              "type": "array",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "helpTextSlot",
              "type": "array",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": "boolean",
              "privacy": "protected",
              "default": false,
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "displayLabel",
              "type": "string",
              "default": "",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "currentOption",
              "type": "object",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "properties": {
                "value": {
                  "description": "The option's value. When selected, the containing form control will receive this value. The value must be unique\nfrom other options in the same group. Values may not contain spaces, as spaces are used as delimiters when listing\nmultiple values.",
                  "type": "string",
                  "default": ""
                },
                "disabled": {
                  "description": "Draws the option in a disabled state, preventing selection.",
                  "type": "boolean",
                  "default": false
                },
                "cachedTextLabel": {
                  "type": "string",
                  "default": ""
                },
                "selected": {
                  "type": "boolean",
                  "default": false
                },
                "current": {
                  "type": "boolean",
                  "default": false
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Node"
                  }
                },
                "dir": {
                  "type": "string",
                  "default": ""
                },
                "lang": {
                  "type": "string",
                  "default": ""
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "type": "array",
              "default": [],
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "items": {
                "type": "object",
                "properties": {
                  "value": {
                    "description": "The option's value. When selected, the containing form control will receive this value. The value must be unique\nfrom other options in the same group. Values may not contain spaces, as spaces are used as delimiters when listing\nmultiple values.",
                    "type": "string",
                    "default": ""
                  },
                  "disabled": {
                    "description": "Draws the option in a disabled state, preventing selection.",
                    "type": "boolean",
                    "default": false
                  },
                  "cachedTextLabel": {
                    "type": "string",
                    "default": ""
                  },
                  "selected": {
                    "type": "boolean",
                    "default": false
                  },
                  "current": {
                    "type": "boolean",
                    "default": false
                  },
                  "labels": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Node"
                    }
                  },
                  "dir": {
                    "type": "string",
                    "default": ""
                  },
                  "lang": {
                    "type": "string",
                    "default": ""
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | string[]"
              },
              "default": "",
              "description": "The current value of the select, submitted as a name/value pair with form data. When `multiple` is enabled, the\nvalue attribute will be a space-delimited list of values based on the options selected, and the value property will\nbe an array. **For this reason, values must not contain spaces.**",
              "attribute": "value",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string | string[]"
              },
              "default": "",
              "description": "The default value of the select component. used to reset the value.",
              "attribute": "defaultValue",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": "string",
              "default": "",
              "description": "Placeholder text to show as a hint when the select is empty.",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": "boolean",
              "default": false,
              "description": "Allows more than one option to be selected.",
              "attribute": "multiple",
              "reflects": true,
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "maxOptionsVisible",
              "type": "number",
              "default": 3,
              "description": "The maximum number of selected options to show when `multiple` is true. After the maximum, \"+n\" will be shown to\nindicate the number of additional items that are selected. Set to 0 to remove the limit.",
              "attribute": "max-options-visible",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the select control.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": "boolean",
              "default": false,
              "description": "Adds a clear button when the select is not empty.",
              "attribute": "clearable",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": "boolean",
              "default": false,
              "description": "Indicates whether or not the select is open. You can toggle this attribute to show and hide the menu, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the select's open state.",
              "attribute": "open",
              "reflects": true,
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": "boolean",
              "default": false,
              "description": "Enable this option to prevent the listbox from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.",
              "attribute": "hoist",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The select's label. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "placement",
              "type": "string",
              "default": "bottom",
              "description": "The preferred placement of the select's menu. Note that the actual placement may vary as needed to keep the listbox\ninside of the viewport.",
              "attribute": "placement",
              "reflects": true,
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "enum": [
                "bottom",
                "top"
              ]
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": "string",
              "default": "",
              "description": "The select's help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "The select's required attribute.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTag",
              "type": "object",
              "description": "A function that customizes the tags to be rendered when multiple=true. The first argument is the option, the second\nis the current tag's index.  The function should return either a Lit TemplateResult or a string containing trusted HTML of the symbol to render at\nthe specified value.",
              "attribute": "getTag",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "getPopup",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "getDisplayInput",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValueInput",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "getListbox",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true,
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "type": "object",
              "properties": {
                "badInput": {
                  "type": "boolean"
                },
                "customError": {
                  "type": "boolean"
                },
                "patternMismatch": {
                  "type": "boolean"
                },
                "rangeOverflow": {
                  "type": "boolean"
                },
                "rangeUnderflow": {
                  "type": "boolean"
                },
                "stepMismatch": {
                  "type": "boolean"
                },
                "tooLong": {
                  "type": "boolean"
                },
                "tooShort": {
                  "type": "boolean"
                },
                "typeMismatch": {
                  "type": "boolean"
                },
                "valid": {
                  "type": "boolean"
                },
                "valueMissing": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true,
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "type": "string"
            },
            {
              "kind": "method",
              "name": "addOpenListeners",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeOpenListeners",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleDocumentFocusIn",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleLabelClick",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleComboboxKeyDown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClearMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleOptionClick",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleTagRemove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "SdRemoveEvent"
                  }
                },
                {
                  "name": "option",
                  "type": {
                    "text": "SdOption"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAllOptions",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "getFirstOption",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "clearAllOptions",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCurrentOption",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SdOption | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSelectedOptions",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SdOption | SdOption[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleOptionSelection",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SdOption"
                  }
                },
                {
                  "name": "force",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "tags",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "type": "array",
              "items": {}
            },
            {
              "kind": "method",
              "name": "handleDisabledChange",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleValueChange",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the listbox.",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the listbox.",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control.",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the control.",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityAnchor",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderCombobox",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderHelpText",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "loading",
              "type": "boolean",
              "default": false,
              "description": "override displayInput",
              "fieldName": "loading"
            },
            {
              "name": "loading-text",
              "type": "string",
              "default": "Loading...",
              "fieldName": "loadingText"
            },
            {
              "name": "value",
              "type": {
                "text": "string | string[]"
              },
              "default": "",
              "description": "The current value of the select, submitted as a name/value pair with form data. When `multiple` is enabled, the\nvalue attribute will be a space-delimited list of values based on the options selected, and the value property will\nbe an array. **For this reason, values must not contain spaces.**",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            {
              "name": "defaultValue",
              "type": {
                "text": "string | string[]"
              },
              "default": "",
              "description": "The default value of the select component. used to reset the value.",
              "fieldName": "defaultValue",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            {
              "name": "placeholder",
              "type": "string",
              "default": "",
              "description": "Placeholder text to show as a hint when the select is empty.",
              "fieldName": "placeholder",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "name": "multiple",
              "type": "boolean",
              "default": false,
              "description": "Allows more than one option to be selected.",
              "fieldName": "multiple",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "name": "max-options-visible",
              "type": "number",
              "default": 3,
              "description": "The maximum number of selected options to show when `multiple` is true. After the maximum, \"+n\" will be shown to\nindicate the number of additional items that are selected. Set to 0 to remove the limit.",
              "fieldName": "maxOptionsVisible",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the select control.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "name": "clearable",
              "type": "boolean",
              "default": false,
              "description": "Adds a clear button when the select is not empty.",
              "fieldName": "clearable",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "name": "open",
              "type": "boolean",
              "default": false,
              "description": "Indicates whether or not the select is open. You can toggle this attribute to show and hide the menu, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the select's open state.",
              "fieldName": "open",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "name": "hoist",
              "type": "boolean",
              "default": false,
              "description": "Enable this option to prevent the listbox from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.",
              "fieldName": "hoist",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The select's label. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "name": "placement",
              "type": "string",
              "default": "bottom",
              "description": "The preferred placement of the select's menu. Note that the actual placement may vary as needed to keep the listbox\ninside of the viewport.",
              "fieldName": "placement",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "enum": [
                "bottom",
                "top"
              ]
            },
            {
              "name": "help-text",
              "type": "string",
              "default": "",
              "description": "The select's help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "The select's required attribute.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              }
            },
            {
              "name": "getTag",
              "type": "object",
              "description": "A function that customizes the tags to be rendered when multiple=true. The first argument is the option, the second\nis the current tag's index.  The function should return either a Lit TemplateResult or a string containing trusted HTML of the symbol to render at\nthe specified value.",
              "fieldName": "getTag",
              "inheritedFrom": {
                "name": "SdSelect",
                "module": "src/components/select/select.ts"
              },
              "kind": "method",
              "additionalProperties": false
            }
          ],
          "superclass": {
            "name": "SdSelect",
            "module": "/src/components/select/select"
          },
          "tagName": "sd-autocomplete",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdAutocomplete",
            "module": "src/components/autocomplete/autocomplete.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-autocomplete",
          "declaration": {
            "name": "SdAutocomplete",
            "module": "src/components/autocomplete/autocomplete.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/avatar/avatar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdAvatar",
          "members": [
            {
              "kind": "field",
              "name": "hasError",
              "type": "boolean",
              "privacy": "private",
              "default": false
            },
            {
              "kind": "field",
              "name": "image",
              "type": "string",
              "default": "",
              "description": "The image source to use for the avatar.",
              "attribute": "image"
            },
            {
              "kind": "field",
              "name": "label",
              "type": "string",
              "default": "",
              "description": "A label to use to describe the avatar to assistive devices.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "initials",
              "type": "string",
              "default": "",
              "description": "Initials to use as a fallback when no image is available (1-2 characters max recommended).",
              "attribute": "initials"
            },
            {
              "kind": "field",
              "name": "fullname",
              "type": "string",
              "default": "",
              "description": "the full name of the user",
              "attribute": "username"
            },
            {
              "kind": "field",
              "name": "loading",
              "type": "string",
              "default": "eager",
              "description": "Indicates how the browser should load the image.",
              "attribute": "loading",
              "enum": [
                "eager",
                "lazy"
              ]
            },
            {
              "kind": "field",
              "name": "color",
              "type": "string",
              "description": "the background color of the avatar, if initials are shown",
              "attribute": "color",
              "enum": [
                "amber",
                "blue",
                "cyan",
                "emerald",
                "fuchsia",
                "green",
                "indigo",
                "lime",
                "orange",
                "pink",
                "purple",
                "red",
                "rose",
                "sky",
                "teal",
                "violet",
                "yellow"
              ]
            },
            {
              "kind": "field",
              "name": "size",
              "type": "string",
              "default": "",
              "description": "the size of the component. apply to both height and width",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "href",
              "type": "string",
              "default": "",
              "description": "render a link",
              "attribute": "href"
            },
            {
              "kind": "method",
              "name": "getRandomColor",
              "privacy": "private",
              "parameters": [
                {
                  "name": "str",
                  "type": {
                    "text": "String"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleImageChange"
            },
            {
              "kind": "method",
              "name": "handleNameChange"
            },
            {
              "kind": "method",
              "name": "handleImageLoadError",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderAvatar",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderLink",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderImage",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderInitials",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderBlank",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "image",
              "type": "string",
              "default": "",
              "description": "The image source to use for the avatar.",
              "fieldName": "image"
            },
            {
              "name": "label",
              "type": "string",
              "default": "",
              "description": "A label to use to describe the avatar to assistive devices.",
              "fieldName": "label"
            },
            {
              "name": "initials",
              "type": "string",
              "default": "",
              "description": "Initials to use as a fallback when no image is available (1-2 characters max recommended).",
              "fieldName": "initials"
            },
            {
              "name": "username",
              "type": "string",
              "default": "",
              "description": "the full name of the user",
              "fieldName": "fullname"
            },
            {
              "name": "loading",
              "type": "string",
              "default": "eager",
              "description": "Indicates how the browser should load the image.",
              "fieldName": "loading",
              "enum": [
                "eager",
                "lazy"
              ]
            },
            {
              "name": "color",
              "type": "string",
              "description": "the background color of the avatar, if initials are shown",
              "fieldName": "color",
              "enum": [
                "amber",
                "blue",
                "cyan",
                "emerald",
                "fuchsia",
                "green",
                "indigo",
                "lime",
                "orange",
                "pink",
                "purple",
                "red",
                "rose",
                "sky",
                "teal",
                "violet",
                "yellow"
              ]
            },
            {
              "name": "size",
              "type": "string",
              "default": "",
              "description": "the size of the component. apply to both height and width",
              "fieldName": "size"
            },
            {
              "name": "href",
              "type": "string",
              "default": "",
              "description": "render a link",
              "fieldName": "href"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-avatar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdAvatar",
            "module": "src/components/avatar/avatar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-avatar",
          "declaration": {
            "name": "SdAvatar",
            "module": "src/components/avatar/avatar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumb/breadcrumb-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdBreadcrumbItem",
          "members": [
            {
              "kind": "field",
              "name": "href",
              "type": "string",
              "description": "Optional URL to direct the user to when the breadcrumb item is activated. When set, a link will be rendered\ninternally. When unset, a button will be rendered instead.",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "target",
              "type": "string",
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "attribute": "target",
              "enum": [
                "_blank",
                "_parent",
                "_self",
                "_top"
              ]
            },
            {
              "kind": "field",
              "name": "rel",
              "type": "string",
              "default": "noreferrer noopener",
              "description": "The `rel` attribute to use on the link. Only used when `href` is set.",
              "attribute": "rel"
            },
            {
              "kind": "field",
              "name": "separatorRight",
              "type": "boolean",
              "default": false,
              "attribute": "separator-right"
            },
            {
              "kind": "method",
              "name": "renderSeparator",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "href",
              "type": "string",
              "description": "Optional URL to direct the user to when the breadcrumb item is activated. When set, a link will be rendered\ninternally. When unset, a button will be rendered instead.",
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": "string",
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "fieldName": "target",
              "enum": [
                "_blank",
                "_parent",
                "_self",
                "_top"
              ]
            },
            {
              "name": "rel",
              "type": "string",
              "default": "noreferrer noopener",
              "description": "The `rel` attribute to use on the link. Only used when `href` is set.",
              "fieldName": "rel"
            },
            {
              "name": "separator-right",
              "type": "boolean",
              "default": false,
              "fieldName": "separatorRight"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-breadcrumb-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdBreadcrumbItem",
            "module": "src/components/breadcrumb/breadcrumb-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-breadcrumb-item",
          "declaration": {
            "name": "SdBreadcrumbItem",
            "module": "src/components/breadcrumb/breadcrumb-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumb/breadcrumb.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdBreadcrumb",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "One or more breadcrumb items to display.",
              "name": ""
            },
            {
              "description": "The separator to use between breadcrumb items. Works best with `<sl-icon>`.",
              "name": "separator"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": "array"
            },
            {
              "kind": "field",
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The label to use for the breadcrumb control. This will not be shown on the screen, but it will be announced by\nscreen readers and other assistive devices to provide more context for users.",
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The label to use for the breadcrumb control. This will not be shown on the screen, but it will be announced by\nscreen readers and other assistive devices to provide more context for users.",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "summary": "Breadcrumbs provide a group of links so users can easily navigate a website's hierarchy.",
          "tagName": "sd-breadcrumb",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdBreadcrumb",
            "module": "src/components/breadcrumb/breadcrumb.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-breadcrumb",
          "declaration": {
            "name": "SdBreadcrumb",
            "module": "src/components/breadcrumb/breadcrumb.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdButton",
          "members": [
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | HTMLLinkElement | undefined"
              },
              "readonly": true,
              "anyOf": [
                {
                  "$ref": "#/definitions/HTMLButtonElement"
                },
                {
                  "$ref": "#/definitions/HTMLLinkElement"
                }
              ]
            },
            {
              "kind": "field",
              "name": "variant",
              "type": "string",
              "default": "filled",
              "description": "choose the style of the button.",
              "attribute": "variant",
              "enum": [
                "filled",
                "outlined",
                "plain"
              ]
            },
            {
              "kind": "field",
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The button’s size.",
              "attribute": "size",
              "enum": [
                "large",
                "medium",
                "small"
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": "string",
              "description": "the label of the button. can be used as a replacement for the slot. for icon buttons, this field is required",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "type",
              "type": "string",
              "default": "button",
              "attribute": "type",
              "enum": [
                "button",
                "reset",
                "submit"
              ]
            },
            {
              "kind": "field",
              "name": "href",
              "type": "string",
              "default": "",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "target",
              "type": "string",
              "default": "",
              "description": "Tells the browser where to open the link. Only used when `href` is present.",
              "attribute": "target",
              "enum": [
                "",
                "_blank",
                "_parent",
                "_self",
                "_top"
              ]
            },
            {
              "kind": "field",
              "name": "rel",
              "type": "string",
              "default": "noreferrer noopener",
              "description": "When using `href`, this attribute will map to the underlying link's `rel` attribute. Unlike regular links, the\ndefault is `noreferrer noopener` to prevent security exploits. However, if you're using `target` to point to a\nspecific tab/window, this will prevent that from working correctly. You can remove or change the default value by\nsetting the attribute to an empty string or a value of your choice, respectively.",
              "attribute": "rel"
            },
            {
              "kind": "field",
              "name": "download",
              "type": "string",
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is present.",
              "attribute": "download"
            },
            {
              "kind": "field",
              "name": "formAction",
              "type": "string",
              "description": "Used to override the form owner's `action` attribute.",
              "attribute": "formaction"
            },
            {
              "kind": "field",
              "name": "formEnctype",
              "type": "string",
              "description": "Used to override the form owner's `enctype` attribute.",
              "attribute": "formenctype",
              "enum": [
                "application/x-www-form-urlencoded",
                "multipart/form-data",
                "text/plain"
              ]
            },
            {
              "kind": "field",
              "name": "formMethod",
              "type": "string",
              "description": "Used to override the form owner's `method` attribute.",
              "attribute": "formmethod",
              "enum": [
                "get",
                "post"
              ]
            },
            {
              "kind": "field",
              "name": "formNoValidate",
              "type": "boolean",
              "description": "Used to override the form owner's `novalidate` attribute.",
              "attribute": "formnovalidate"
            },
            {
              "kind": "field",
              "name": "formTarget",
              "type": "string",
              "description": "Used to override the form owner's `target` attribute.",
              "attribute": "formtarget"
            },
            {
              "kind": "field",
              "name": "trailingIcon",
              "type": "boolean",
              "default": false,
              "description": "Whether to render the icon at the inline end of the label rather than the\ninline start.\n_Note: Link buttons cannot have trailing icons.",
              "attribute": "trailing-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": "string",
              "default": "",
              "description": "The value of the button, submitted as a pair with the button's name as part of the form data, but only when this\nbutton is the submitter. This attribute is ignored when `href` is present.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "focused",
              "type": "boolean",
              "default": false
            },
            {
              "kind": "method",
              "name": "getButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private",
              "description": "Gets the validation message"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the button."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the button."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the button."
            },
            {
              "kind": "method",
              "name": "renderButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderLink",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderContent"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": "string",
              "default": "filled",
              "description": "choose the style of the button.",
              "fieldName": "variant",
              "enum": [
                "filled",
                "outlined",
                "plain"
              ]
            },
            {
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The button’s size.",
              "fieldName": "size",
              "enum": [
                "large",
                "medium",
                "small"
              ]
            },
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "type": "string",
              "description": "the label of the button. can be used as a replacement for the slot. for icon buttons, this field is required",
              "fieldName": "label"
            },
            {
              "name": "type",
              "type": "string",
              "default": "button",
              "fieldName": "type",
              "enum": [
                "button",
                "reset",
                "submit"
              ]
            },
            {
              "name": "href",
              "type": "string",
              "default": "",
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": "string",
              "default": "",
              "description": "Tells the browser where to open the link. Only used when `href` is present.",
              "fieldName": "target",
              "enum": [
                "",
                "_blank",
                "_parent",
                "_self",
                "_top"
              ]
            },
            {
              "name": "rel",
              "type": "string",
              "default": "noreferrer noopener",
              "description": "When using `href`, this attribute will map to the underlying link's `rel` attribute. Unlike regular links, the\ndefault is `noreferrer noopener` to prevent security exploits. However, if you're using `target` to point to a\nspecific tab/window, this will prevent that from working correctly. You can remove or change the default value by\nsetting the attribute to an empty string or a value of your choice, respectively.",
              "fieldName": "rel"
            },
            {
              "name": "download",
              "type": "string",
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is present.",
              "fieldName": "download"
            },
            {
              "name": "formaction",
              "type": "string",
              "description": "Used to override the form owner's `action` attribute.",
              "fieldName": "formAction"
            },
            {
              "name": "formenctype",
              "type": "string",
              "description": "Used to override the form owner's `enctype` attribute.",
              "fieldName": "formEnctype",
              "enum": [
                "application/x-www-form-urlencoded",
                "multipart/form-data",
                "text/plain"
              ]
            },
            {
              "name": "formmethod",
              "type": "string",
              "description": "Used to override the form owner's `method` attribute.",
              "fieldName": "formMethod",
              "enum": [
                "get",
                "post"
              ]
            },
            {
              "name": "formnovalidate",
              "type": "boolean",
              "description": "Used to override the form owner's `novalidate` attribute.",
              "fieldName": "formNoValidate"
            },
            {
              "name": "formtarget",
              "type": "string",
              "description": "Used to override the form owner's `target` attribute.",
              "fieldName": "formTarget"
            },
            {
              "name": "trailing-icon",
              "type": "boolean",
              "default": false,
              "description": "Whether to render the icon at the inline end of the label rather than the\ninline start.\n_Note: Link buttons cannot have trailing icons.",
              "fieldName": "trailingIcon"
            },
            {
              "name": "value",
              "type": "string",
              "default": "",
              "description": "The value of the button, submitted as a pair with the button's name as part of the form data, but only when this\nbutton is the submitter. This attribute is ignored when `href` is present.",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "BaseButtonClass",
            "module": "src/components/button/button.ts"
          },
          "tagName": "sd-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdButton",
            "module": "src/components/button/button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-button",
          "declaration": {
            "name": "SdButton",
            "module": "src/components/button/button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card-filled.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdCardFilled",
          "members": [],
          "superclass": {
            "name": "Card",
            "module": "/src/components/card/internal/card"
          },
          "tagName": "sd-card-filled",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SdCardFilled",
          "declaration": {
            "name": "SdCardFilled",
            "module": "src/components/card/card-filled.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-card-filled",
          "declaration": {
            "name": "SdCardFilled",
            "module": "src/components/card/card-filled.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card-outlined.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdCardOutlined",
          "members": [],
          "superclass": {
            "name": "Card",
            "module": "/src/components/card/internal/card"
          },
          "tagName": "sd-card-outlined",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SdCardOutlined",
          "declaration": {
            "name": "SdCardOutlined",
            "module": "src/components/card/card-outlined.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-card-outlined",
          "declaration": {
            "name": "SdCardOutlined",
            "module": "src/components/card/card-outlined.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/carousel/carousel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdCarousel",
          "members": [
            {
              "kind": "field",
              "name": "autoTransition",
              "type": "boolean",
              "default": true,
              "attribute": "autoTransition"
            },
            {
              "kind": "field",
              "name": "count",
              "type": "number",
              "default": 0,
              "attribute": "count"
            },
            {
              "kind": "field",
              "name": "_slideIndex",
              "type": "number",
              "privacy": "private",
              "default": 0
            },
            {
              "kind": "method",
              "name": "_showSlideRadio",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_changeRadio",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_showSlide",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_prevSlide"
            },
            {
              "kind": "method",
              "name": "_nextSlide"
            },
            {
              "kind": "method",
              "name": "_autoShowSlides"
            }
          ],
          "attributes": [
            {
              "name": "autoTransition",
              "type": "boolean",
              "default": true,
              "fieldName": "autoTransition"
            },
            {
              "name": "count",
              "type": "number",
              "default": 0,
              "fieldName": "count"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sd-carousel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdCarousel",
            "module": "src/components/carousel/carousel.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-carousel",
          "declaration": {
            "name": "SdCarousel",
            "module": "src/components/carousel/carousel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/carousel/slider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdCarouselSlider",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sd-carousel-slider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdCarouselSlider",
            "module": "src/components/carousel/slider.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-carousel-slider",
          "declaration": {
            "name": "SdCarouselSlider",
            "module": "src/components/carousel/slider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdCheckbox",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": "string",
              "default": "on",
              "description": "The current value of the checkbox, submitted as a name/value pair with form data.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "title",
              "type": "string",
              "default": "",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The checkbox's size.",
              "attribute": "size",
              "reflects": true,
              "enum": [
                "medium",
                "small"
              ]
            },
            {
              "kind": "field",
              "name": "checked",
              "type": "boolean",
              "default": false,
              "description": "Draws the checkbox in a checked state.",
              "attribute": "checked"
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": "boolean",
              "default": false,
              "description": "Draws the checkbox in an indeterminate state. This is usually applied to checkboxes that represents a \"select\nall/none\" behavior when associated checkboxes have a mix of checked and unchecked states.",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "Makes the checkbox a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labelText",
              "type": "string",
              "default": "",
              "description": "The checkbox's lable. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": "string",
              "default": "",
              "description": "The checkbox's help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "method",
              "name": "getInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleStateChange"
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the checkbox."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the checkbox."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the checkbox."
            },
            {
              "kind": "method",
              "name": "getFormValue"
            },
            {
              "kind": "method",
              "name": "getFormState"
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getValidityAnchor"
            },
            {
              "kind": "method",
              "name": "getState",
              "return": {
                "type": {
                  "text": "CheckboxState"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": "string",
              "default": "on",
              "description": "The current value of the checkbox, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "title",
              "type": "string",
              "default": "",
              "fieldName": "title"
            },
            {
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The checkbox's size.",
              "fieldName": "size",
              "enum": [
                "medium",
                "small"
              ]
            },
            {
              "name": "checked",
              "type": "boolean",
              "default": false,
              "description": "Draws the checkbox in a checked state.",
              "fieldName": "checked"
            },
            {
              "name": "indeterminate",
              "type": "boolean",
              "default": false,
              "description": "Draws the checkbox in an indeterminate state. This is usually applied to checkboxes that represents a \"select\nall/none\" behavior when associated checkboxes have a mix of checked and unchecked states.",
              "fieldName": "indeterminate"
            },
            {
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "Makes the checkbox a required field.",
              "fieldName": "required"
            },
            {
              "name": "label-text",
              "type": "string",
              "default": "",
              "description": "The checkbox's lable. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "labelText"
            },
            {
              "name": "help-text",
              "type": "string",
              "default": "",
              "description": "The checkbox's help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            }
          ],
          "superclass": {
            "name": "CheckboxBaseClass",
            "module": "src/components/checkbox/checkbox.ts"
          },
          "tagName": "sd-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdCheckbox",
            "module": "src/components/checkbox/checkbox.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-checkbox",
          "declaration": {
            "name": "SdCheckbox",
            "module": "src/components/checkbox/checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/divider/divider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdDivider",
          "members": [
            {
              "kind": "field",
              "name": "vertical",
              "type": "boolean",
              "default": false,
              "description": "Draws the divider in a vertical orientation.",
              "attribute": "vertical",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleVerticalChange"
            }
          ],
          "attributes": [
            {
              "name": "vertical",
              "type": "boolean",
              "default": false,
              "description": "Draws the divider in a vertical orientation.",
              "fieldName": "vertical"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-divider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdDivider",
            "module": "src/components/divider/divider.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-divider",
          "declaration": {
            "name": "SdDivider",
            "module": "src/components/divider/divider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdDropdown",
          "members": [
            {
              "kind": "field",
              "name": "popup",
              "type": "object",
              "properties": {
                "anchorEl": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "cleanup": {},
                "popup": {
                  "description": "A reference to the internal popup container. Useful for animating and styling the popup with JavaScript.",
                  "$ref": "#/definitions/HTMLElement"
                },
                "arrowEl": {
                  "$ref": "#/definitions/HTMLElement"
                },
                "anchor": {
                  "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can provide the anchor\nelement `id`, a DOM element reference, or a `VirtualElement`. If the anchor lives inside the popup, use the\n`anchor` slot instead.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "string"
                    }
                  ]
                },
                "active": {
                  "description": "Activates the positioning logic and shows the popup. When this attribute is removed, the positioning logic is torn\ndown and the popup will be hidden.",
                  "type": "boolean",
                  "default": false
                },
                "placement": {
                  "description": "The preferred placement of the popup. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",
                  "enum": [
                    "bottom",
                    "bottom-end",
                    "bottom-start",
                    "left",
                    "left-end",
                    "left-start",
                    "right",
                    "right-end",
                    "right-start",
                    "top",
                    "top-end",
                    "top-start"
                  ],
                  "type": "string",
                  "default": "top"
                },
                "strategy": {
                  "description": "Determines how the popup is positioned. The `absolute` strategy works well in most cases, but if overflow is\nclipped, using a `fixed` position strategy can often workaround it.",
                  "enum": [
                    "absolute",
                    "fixed"
                  ],
                  "type": "string",
                  "default": "absolute"
                },
                "distance": {
                  "description": "The distance in pixels from which to offset the panel away from its anchor.",
                  "type": "number",
                  "default": 0
                },
                "skidding": {
                  "description": "The distance in pixels from which to offset the panel along its anchor.",
                  "type": "number",
                  "default": 0
                },
                "arrow": {
                  "description": "Attaches an arrow to the popup. The arrow's size and color can be customized using the `--arrow-size` and\n`--arrow-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",
                  "type": "boolean",
                  "default": false
                },
                "arrowPlacement": {
                  "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",
                  "enum": [
                    "anchor",
                    "center",
                    "end",
                    "start"
                  ],
                  "type": "string",
                  "default": "anchor"
                },
                "arrowPadding": {
                  "description": "The amount of padding between the arrow and the edges of the popup. If the popup has a border-radius, for example,\nthis will prevent it from overflowing the corners.",
                  "type": "number",
                  "default": 10
                },
                "flip": {
                  "description": "When set, placement of the popup will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",
                  "type": "boolean",
                  "default": false
                },
                "flipFallbackPlacements": {
                  "description": "If the preferred placement doesn't fit, popup will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead.",
                  "type": "string",
                  "default": ""
                },
                "flipFallbackStrategy": {
                  "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popup should be positioned using the best available fit based on available space or as it was initially\npreferred.",
                  "enum": [
                    "best-fit",
                    "initial"
                  ],
                  "type": "string",
                  "default": "best-fit"
                },
                "flipBoundary": {
                  "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Element"
                      }
                    }
                  ]
                },
                "flipPadding": {
                  "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur.",
                  "type": "number",
                  "default": 0
                },
                "shift": {
                  "description": "Moves the popup along the axis to keep it in view when clipped.",
                  "type": "boolean",
                  "default": false
                },
                "shiftBoundary": {
                  "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Element"
                      }
                    }
                  ]
                },
                "shiftPadding": {
                  "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur.",
                  "type": "number",
                  "default": 0
                },
                "autoSize": {
                  "description": "When set, this will cause the popup to automatically resize itself to prevent it from overflowing.",
                  "enum": [
                    "both",
                    "horizontal",
                    "vertical"
                  ],
                  "type": "string"
                },
                "sync": {
                  "description": "Syncs the popup's width or height to that of the anchor element.",
                  "enum": [
                    "both",
                    "height",
                    "width"
                  ],
                  "type": "string"
                },
                "autoSizeBoundary": {
                  "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Element"
                      }
                    }
                  ]
                },
                "autoSizePadding": {
                  "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",
                  "type": "number",
                  "default": 0
                },
                "hoverBridge": {
                  "description": "When a gap exists between the anchor and the popup element, this option will add a \"hover bridge\" that fills the\ngap using an invisible element. This makes listening for events such as `mouseenter` and `mouseleave` more sane\nbecause the pointer never technically leaves the element. The hover bridge will only be drawn when the popover is\nactive.",
                  "type": "boolean",
                  "default": false
                },
                "updateHoverBridge": {
                  "type": "object",
                  "additionalProperties": false
                },
                "dir": {
                  "type": "string",
                  "default": ""
                },
                "lang": {
                  "type": "string",
                  "default": ""
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "closeWatcher",
              "type": {
                "text": "CloseWatcher | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "open",
              "type": "boolean",
              "default": false,
              "description": "Indicates whether or not the dropdown is open. You can toggle this attribute to show and hide the dropdown, or you\ncan use the `show()` and `hide()` methods and this attribute will reflect the dropdown's open state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": "string",
              "default": "bottom-start",
              "description": "The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport.",
              "attribute": "placement",
              "reflects": true,
              "enum": [
                "bottom",
                "bottom-end",
                "bottom-start",
                "left",
                "left-end",
                "left-start",
                "right",
                "right-end",
                "right-start",
                "top",
                "top-end",
                "top-start"
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the dropdown so the panel will not open.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "stayOpenOnSelect",
              "type": "boolean",
              "default": false,
              "description": "By default, the dropdown is closed when an item is selected. This attribute will keep it open instead. Useful for\ndropdowns that allow for multiple interactions.",
              "attribute": "stay-open-on-select",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "containingElement",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "The dropdown will close when the user interacts outside of this element (e.g. clicking). Useful for composing other\ncomponents that use a dropdown internally."
            },
            {
              "kind": "field",
              "name": "distance",
              "type": "number",
              "default": 0,
              "description": "The distance in pixels from which to offset the panel away from its trigger.",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": "number",
              "default": 0,
              "description": "The distance in pixels from which to offset the panel along its trigger.",
              "attribute": "skidding"
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": "boolean",
              "default": false,
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.",
              "attribute": "hoist"
            },
            {
              "kind": "field",
              "name": "sync",
              "type": "string",
              "default": "undefined",
              "description": "Syncs the popup width or height to that of the trigger element.",
              "attribute": "sync",
              "reflects": true,
              "enum": [
                "both",
                "height",
                "width"
              ]
            },
            {
              "kind": "method",
              "name": "focusOnTrigger"
            },
            {
              "kind": "method",
              "name": "getMenu"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleDocumentKeyDown",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleDocumentMouseDown",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handlePanelSelect",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleTriggerClick"
            },
            {
              "kind": "method",
              "name": "handleTriggerKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTriggerKeyUp",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTriggerSlotChange"
            },
            {
              "kind": "method",
              "name": "updateAccessibleTrigger"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the dropdown panel."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the dropdown panel"
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Instructs the dropdown menu to reposition. Useful when the position or size of the trigger changes when the menu\r\nis activated."
            },
            {
              "kind": "method",
              "name": "addOpenListeners"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": "boolean",
              "default": false,
              "description": "Indicates whether or not the dropdown is open. You can toggle this attribute to show and hide the dropdown, or you\ncan use the `show()` and `hide()` methods and this attribute will reflect the dropdown's open state.",
              "fieldName": "open"
            },
            {
              "name": "placement",
              "type": "string",
              "default": "bottom-start",
              "description": "The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport.",
              "fieldName": "placement",
              "enum": [
                "bottom",
                "bottom-end",
                "bottom-start",
                "left",
                "left-end",
                "left-start",
                "right",
                "right-end",
                "right-start",
                "top",
                "top-end",
                "top-start"
              ]
            },
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the dropdown so the panel will not open.",
              "fieldName": "disabled"
            },
            {
              "name": "stay-open-on-select",
              "type": "boolean",
              "default": false,
              "description": "By default, the dropdown is closed when an item is selected. This attribute will keep it open instead. Useful for\ndropdowns that allow for multiple interactions.",
              "fieldName": "stayOpenOnSelect"
            },
            {
              "name": "distance",
              "type": "number",
              "default": 0,
              "description": "The distance in pixels from which to offset the panel away from its trigger.",
              "fieldName": "distance"
            },
            {
              "name": "skidding",
              "type": "number",
              "default": 0,
              "description": "The distance in pixels from which to offset the panel along its trigger.",
              "fieldName": "skidding"
            },
            {
              "name": "hoist",
              "type": "boolean",
              "default": false,
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.",
              "fieldName": "hoist"
            },
            {
              "name": "sync",
              "type": "string",
              "default": "undefined",
              "description": "Syncs the popup width or height to that of the trigger element.",
              "fieldName": "sync",
              "enum": [
                "both",
                "height",
                "width"
              ]
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-dropdown",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdDropdown",
            "module": "src/components/dropdown/dropdown.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-dropdown",
          "declaration": {
            "name": "SdDropdown",
            "module": "src/components/dropdown/dropdown.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/grid-table/grid-table.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdGridTable",
          "members": [
            {
              "kind": "field",
              "name": "headerCells",
              "type": "array",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "tableCells",
              "type": "array",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selection",
              "type": "boolean",
              "default": false,
              "attribute": "selection"
            },
            {
              "kind": "field",
              "name": "rowCount",
              "type": "number",
              "description": "the total number of rows in the table. used for correct pagination display",
              "attribute": "row-count"
            },
            {
              "kind": "field",
              "name": "sortingMode",
              "type": "string",
              "default": "client",
              "description": "Sorting can be processed on the server or client-side. Set it to 'client' if you would like to handle sorting on the client-side.\nSet it to 'server' if you would like to handle sorting on the server-side.",
              "attribute": "sortingMode",
              "enum": [
                "client",
                "server"
              ]
            },
            {
              "kind": "field",
              "name": "handleSortChange",
              "type": "object",
              "attribute": "handleSortChange",
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "sortOrder",
              "type": "array",
              "default": [
                "asc",
                "desc",
                "none"
              ],
              "description": "the sort order cycle",
              "attribute": "sortOrder",
              "items": {
                "description": "cycle between asc => desc => none",
                "enum": [
                  "asc",
                  "desc",
                  "none"
                ],
                "type": "string"
              }
            },
            {
              "kind": "field",
              "name": "defaultWidth",
              "type": "string",
              "default": "100px",
              "attribute": "defaultWidth"
            },
            {
              "kind": "field",
              "name": "defaultMinWidth",
              "type": "string",
              "default": "10px",
              "attribute": "defaultMinWidth"
            },
            {
              "kind": "field",
              "name": "headers",
              "type": "array",
              "default": [],
              "items": {
                "type": "object",
                "properties": {
                  "field": {
                    "description": "the field name of the column. if headerName is not set, the field value become the header name",
                    "type": "string"
                  },
                  "headerName": {
                    "description": "the column header name displayed",
                    "type": "string"
                  },
                  "serverField": {
                    "description": "the field name in the server",
                    "type": "string"
                  },
                  "flex": {
                    "type": "number"
                  },
                  "width": {
                    "type": "string"
                  },
                  "minWidth": {
                    "type": "string"
                  },
                  "maxWidth": {
                    "type": "string"
                  },
                  "sortable": {
                    "description": "make the column not sortable",
                    "type": "boolean"
                  },
                  "type": {
                    "description": "the type of data inside the cells. override the default renderer",
                    "enum": [
                      "action",
                      "boolean",
                      "date",
                      "datetime",
                      "image",
                      "number",
                      "string",
                      "tag"
                    ],
                    "type": "string"
                  },
                  "typeArgs": {
                    "description": "arguments that are type specific",
                    "$ref": "#/definitions/ColumnTypeArgs"
                  },
                  "valueGetter": {
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "kind": "field",
              "name": "rows",
              "type": "array",
              "default": [],
              "items": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/GridCell"
                }
              }
            },
            {
              "kind": "field",
              "name": "initialData",
              "type": "object",
              "default": "{}",
              "properties": {
                "sortModel": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SortModel"
                  }
                },
                "currentPageSize": {
                  "type": "number"
                },
                "currentPage": {
                  "type": "number"
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "pagination",
              "type": "object",
              "default": "{\r\n        handlePageChange() {\r\n            console.error(\"no callback for handling page change is set\");\r\n        },\r\n    }",
              "properties": {
                "hide": {
                  "type": "boolean"
                },
                "pageSize": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                },
                "paginationMode": {
                  "enum": [
                    "client",
                    "server"
                  ],
                  "type": "string"
                },
                "handlePageChange": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "columnOrder",
              "type": "array",
              "default": [],
              "items": {
                "type": "string"
              }
            },
            {
              "kind": "field",
              "name": "sortModel",
              "type": "array",
              "default": [
                {
                  "field": "",
                  "sort": "none"
                }
              ],
              "items": {
                "type": "object",
                "properties": {
                  "field": {
                    "type": "string"
                  },
                  "sort": {
                    "$ref": "#/definitions/SortingType"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "kind": "field",
              "name": "currentPageSize",
              "type": "number",
              "privacy": "public",
              "default": 10,
              "description": "rows per page"
            },
            {
              "kind": "field",
              "name": "currentPage",
              "type": "number",
              "privacy": "public",
              "default": 1
            },
            {
              "kind": "method",
              "name": "getServerField",
              "privacy": "public",
              "parameters": [
                {
                  "name": "field",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "get the server field name from the field name"
            },
            {
              "kind": "method",
              "name": "resize",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getTableCells",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "switchSort",
              "privacy": "private",
              "parameters": [
                {
                  "name": "header",
                  "type": {
                    "text": "ColumnHeader"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePageChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "privacy": "private",
              "parameters": [
                {
                  "name": "header",
                  "type": {
                    "text": "ColumnHeader"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderRows",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderRow",
              "privacy": "private",
              "parameters": [
                {
                  "name": "row",
                  "type": {
                    "text": "GridRow"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderCell",
              "privacy": "private",
              "parameters": [
                {
                  "name": "header",
                  "type": {
                    "text": "ColumnHeader"
                  }
                },
                {
                  "name": "cell",
                  "optional": true,
                  "type": {
                    "text": "GridCell"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderCellContent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "cell",
                  "type": {
                    "text": "GridCell"
                  }
                },
                {
                  "name": "header",
                  "type": {
                    "text": "ColumnHeader"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderCellString",
              "privacy": "private",
              "parameters": [
                {
                  "name": "cell",
                  "type": {
                    "text": "GridCell"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderCellTag",
              "privacy": "private",
              "parameters": [
                {
                  "name": "cell",
                  "type": {
                    "text": "GridCell"
                  }
                },
                {
                  "name": "args",
                  "type": {
                    "text": "ColumnTypeArgs | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderCellDateTime",
              "privacy": "private",
              "parameters": [
                {
                  "name": "cell",
                  "type": {
                    "text": "GridCell"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderSortArrow",
              "privacy": "private",
              "parameters": [
                {
                  "name": "header",
                  "type": {
                    "text": "ColumnHeader"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderFooter",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "selection",
              "type": "boolean",
              "default": false,
              "fieldName": "selection"
            },
            {
              "name": "row-count",
              "type": "number",
              "description": "the total number of rows in the table. used for correct pagination display",
              "fieldName": "rowCount"
            },
            {
              "name": "sortingMode",
              "type": "string",
              "default": "client",
              "description": "Sorting can be processed on the server or client-side. Set it to 'client' if you would like to handle sorting on the client-side.\nSet it to 'server' if you would like to handle sorting on the server-side.",
              "fieldName": "sortingMode",
              "enum": [
                "client",
                "server"
              ]
            },
            {
              "name": "handleSortChange",
              "type": "object",
              "fieldName": "handleSortChange",
              "additionalProperties": false
            },
            {
              "name": "sortOrder",
              "type": "array",
              "default": [
                "asc",
                "desc",
                "none"
              ],
              "description": "the sort order cycle",
              "fieldName": "sortOrder",
              "items": {
                "description": "cycle between asc => desc => none",
                "enum": [
                  "asc",
                  "desc",
                  "none"
                ],
                "type": "string"
              }
            },
            {
              "name": "defaultWidth",
              "type": "string",
              "default": "100px",
              "fieldName": "defaultWidth"
            },
            {
              "name": "defaultMinWidth",
              "type": "string",
              "default": "10px",
              "fieldName": "defaultMinWidth"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-grid-table",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdGridTable",
            "module": "src/components/grid-table/grid-table.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-grid-table",
          "declaration": {
            "name": "SdGridTable",
            "module": "src/components/grid-table/grid-table.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Icon",
          "members": [
            {
              "kind": "field",
              "name": "fill",
              "type": "boolean",
              "default": false,
              "attribute": "fill"
            },
            {
              "kind": "field",
              "name": "size",
              "type": "string",
              "default": "medium",
              "attribute": "size",
              "enum": [
                "large",
                "medium",
                "small"
              ]
            },
            {
              "kind": "method",
              "name": "renderSVG",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "unknown"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "fill",
              "type": "boolean",
              "default": false,
              "fieldName": "fill"
            },
            {
              "name": "size",
              "type": "string",
              "default": "medium",
              "fieldName": "size",
              "enum": [
                "large",
                "medium",
                "small"
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sd-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Icon",
          "declaration": {
            "name": "Icon",
            "module": "src/components/icon/icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-icon",
          "declaration": {
            "name": "Icon",
            "module": "src/components/icon/icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon-button/icon-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdIconButton",
          "members": [
            {
              "kind": "method",
              "name": "renderContent",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | HTMLLinkElement | undefined"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              },
              "anyOf": [
                {
                  "$ref": "#/definitions/HTMLButtonElement"
                },
                {
                  "$ref": "#/definitions/HTMLLinkElement"
                }
              ]
            },
            {
              "kind": "field",
              "name": "variant",
              "type": "string",
              "default": "filled",
              "description": "choose the style of the button.",
              "attribute": "variant",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              },
              "enum": [
                "filled",
                "outlined",
                "plain"
              ]
            },
            {
              "kind": "field",
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The button’s size.",
              "attribute": "size",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              },
              "enum": [
                "large",
                "medium",
                "small"
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": "string",
              "description": "the label of the button. can be used as a replacement for the slot. for icon buttons, this field is required",
              "attribute": "label",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": "string",
              "default": "button",
              "attribute": "type",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              },
              "enum": [
                "button",
                "reset",
                "submit"
              ]
            },
            {
              "kind": "field",
              "name": "href",
              "type": "string",
              "default": "",
              "attribute": "href",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": "string",
              "default": "",
              "description": "Tells the browser where to open the link. Only used when `href` is present.",
              "attribute": "target",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              },
              "enum": [
                "",
                "_blank",
                "_parent",
                "_self",
                "_top"
              ]
            },
            {
              "kind": "field",
              "name": "rel",
              "type": "string",
              "default": "noreferrer noopener",
              "description": "When using `href`, this attribute will map to the underlying link's `rel` attribute. Unlike regular links, the\ndefault is `noreferrer noopener` to prevent security exploits. However, if you're using `target` to point to a\nspecific tab/window, this will prevent that from working correctly. You can remove or change the default value by\nsetting the attribute to an empty string or a value of your choice, respectively.",
              "attribute": "rel",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": "string",
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is present.",
              "attribute": "download",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAction",
              "type": "string",
              "description": "Used to override the form owner's `action` attribute.",
              "attribute": "formaction",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "formEnctype",
              "type": "string",
              "description": "Used to override the form owner's `enctype` attribute.",
              "attribute": "formenctype",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              },
              "enum": [
                "application/x-www-form-urlencoded",
                "multipart/form-data",
                "text/plain"
              ]
            },
            {
              "kind": "field",
              "name": "formMethod",
              "type": "string",
              "description": "Used to override the form owner's `method` attribute.",
              "attribute": "formmethod",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              },
              "enum": [
                "get",
                "post"
              ]
            },
            {
              "kind": "field",
              "name": "formNoValidate",
              "type": "boolean",
              "description": "Used to override the form owner's `novalidate` attribute.",
              "attribute": "formnovalidate",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "formTarget",
              "type": "string",
              "description": "Used to override the form owner's `target` attribute.",
              "attribute": "formtarget",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "trailingIcon",
              "type": "boolean",
              "default": false,
              "description": "Whether to render the icon at the inline end of the label rather than the\ninline start.\n_Note: Link buttons cannot have trailing icons.",
              "attribute": "trailing-icon",
              "reflects": true,
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": "string",
              "default": "",
              "description": "The value of the button, submitted as a pair with the button's name as part of the form data, but only when this\nbutton is the submitter. This attribute is ignored when `href` is present.",
              "attribute": "value",
              "reflects": true,
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": "boolean",
              "default": false,
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "getButton",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private",
              "description": "Gets the validation message",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the button.",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the button.",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the button.",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderButton",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLink",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            }
          ],
          "superclass": {
            "name": "SdButton",
            "module": "/src/components/button/button.js"
          },
          "tagName": "sd-icon-button",
          "customElement": true,
          "attributes": [
            {
              "name": "variant",
              "type": "string",
              "default": "filled",
              "description": "choose the style of the button.",
              "fieldName": "variant",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              },
              "enum": [
                "filled",
                "outlined",
                "plain"
              ]
            },
            {
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The button’s size.",
              "fieldName": "size",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              },
              "enum": [
                "large",
                "medium",
                "small"
              ]
            },
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "name": "label",
              "type": "string",
              "description": "the label of the button. can be used as a replacement for the slot. for icon buttons, this field is required",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "name": "type",
              "type": "string",
              "default": "button",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              },
              "enum": [
                "button",
                "reset",
                "submit"
              ]
            },
            {
              "name": "href",
              "type": "string",
              "default": "",
              "fieldName": "href",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "name": "target",
              "type": "string",
              "default": "",
              "description": "Tells the browser where to open the link. Only used when `href` is present.",
              "fieldName": "target",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              },
              "enum": [
                "",
                "_blank",
                "_parent",
                "_self",
                "_top"
              ]
            },
            {
              "name": "rel",
              "type": "string",
              "default": "noreferrer noopener",
              "description": "When using `href`, this attribute will map to the underlying link's `rel` attribute. Unlike regular links, the\ndefault is `noreferrer noopener` to prevent security exploits. However, if you're using `target` to point to a\nspecific tab/window, this will prevent that from working correctly. You can remove or change the default value by\nsetting the attribute to an empty string or a value of your choice, respectively.",
              "fieldName": "rel",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "name": "download",
              "type": "string",
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is present.",
              "fieldName": "download",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "name": "formaction",
              "type": "string",
              "description": "Used to override the form owner's `action` attribute.",
              "fieldName": "formAction",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "name": "formenctype",
              "type": "string",
              "description": "Used to override the form owner's `enctype` attribute.",
              "fieldName": "formEnctype",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              },
              "enum": [
                "application/x-www-form-urlencoded",
                "multipart/form-data",
                "text/plain"
              ]
            },
            {
              "name": "formmethod",
              "type": "string",
              "description": "Used to override the form owner's `method` attribute.",
              "fieldName": "formMethod",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              },
              "enum": [
                "get",
                "post"
              ]
            },
            {
              "name": "formnovalidate",
              "type": "boolean",
              "description": "Used to override the form owner's `novalidate` attribute.",
              "fieldName": "formNoValidate",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "name": "formtarget",
              "type": "string",
              "description": "Used to override the form owner's `target` attribute.",
              "fieldName": "formTarget",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "name": "trailing-icon",
              "type": "boolean",
              "default": false,
              "description": "Whether to render the icon at the inline end of the label rather than the\ninline start.\n_Note: Link buttons cannot have trailing icons.",
              "fieldName": "trailingIcon",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "name": "value",
              "type": "string",
              "default": "",
              "description": "The value of the button, submitted as a pair with the button's name as part of the form data, but only when this\nbutton is the submitter. This attribute is ignored when `href` is present.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "SdButton",
                "module": "src/components/button/button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdIconButton",
            "module": "src/components/icon-button/icon-button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-icon-button",
          "declaration": {
            "name": "SdIconButton",
            "module": "src/components/icon-button/icon-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/inline-error/inline-error.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdInlineError",
          "members": [
            {
              "kind": "field",
              "name": "message",
              "type": "string",
              "default": "",
              "description": "help text to explain the error.",
              "attribute": "message"
            }
          ],
          "attributes": [
            {
              "name": "message",
              "type": "string",
              "default": "",
              "description": "help text to explain the error.",
              "fieldName": "message"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-inline-error",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdInlineError",
            "module": "src/components/inline-error/inline-error.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-inline-error",
          "declaration": {
            "name": "SdInlineError",
            "module": "src/components/inline-error/inline-error.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input/input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdInput",
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": "string",
              "default": "text",
              "description": "The `<input>` type to use, defaults to \"text\". The type greatly changes how\nthe text field behaves.\n\nText fields support a limited number of `<input>` types:\n\n- text\n- email\n- number\n- password\n- search\n- tel\n- url\n- date\n- datetime-local\n- time",
              "attribute": "type",
              "reflects": true,
              "enum": [
                "color",
                "date",
                "email",
                "file",
                "month",
                "number",
                "password",
                "search",
                "tel",
                "text",
                "url",
                "week"
              ]
            },
            {
              "kind": "field",
              "name": "title",
              "type": "string",
              "default": "",
              "description": "the title of the input element",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "error",
              "type": "boolean",
              "default": false,
              "description": "Gets or sets whether or not the text field is in a visually invalid state.\n\nThis error state overrides the error state controlled by\n`reportValidity()`.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "errorText",
              "type": "string",
              "default": "",
              "description": "The error message that replaces supporting text when `error` is true. If\n`errorText` is an empty string, then the supporting text will continue to\nshow.\n\nThis error message overrides the error message displayed by\n`reportValidity()`.",
              "attribute": "error-text"
            },
            {
              "kind": "field",
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The input's label. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "noAsterisk",
              "type": "boolean",
              "default": false,
              "description": "Disables the asterisk on the label, when the text field is required.",
              "attribute": "no-asterisk"
            },
            {
              "kind": "field",
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "Makes the input a required field. Additionally the floating label will render an asterisk \"*\" when true.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": "string",
              "default": "",
              "description": "The current value of the input, submitted as a name/value pair with form data.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": "string",
              "default": "",
              "description": "the default value of the field. used to reset the input field to an initial value."
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": "string",
              "default": "",
              "description": "The input's help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": "boolean",
              "default": false,
              "description": "Adds a clear button when the input is not empty.",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "max",
              "type": "string",
              "description": "Defines the greatest value in the range of permitted values.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": "number",
              "description": "The maximum number of characters a user can enter into the text field. Set\nto -1 for none.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "min",
              "type": "string",
              "description": "Defines the most negative value in the range of permitted values.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": "number",
              "description": "The minimum number of characters a user can enter into the text field. Set\nto -1 for none.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "noSpinner",
              "type": "boolean",
              "default": false,
              "description": "Hides the browser's built-in increment/decrement spin buttons for number inputs.",
              "attribute": "no-spinner"
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": "string",
              "description": "A regular expression pattern to validate input against.",
              "attribute": "pattern"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": "string",
              "default": "",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": "boolean",
              "default": false,
              "description": "Makes the input readonly.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "passwordToggle",
              "type": "boolean",
              "default": false,
              "description": "Adds a button to toggle the password's visibility. Only applies to password types.",
              "attribute": "password-toggle"
            },
            {
              "kind": "field",
              "name": "passwordVisible",
              "type": "boolean",
              "default": false,
              "description": "Determines whether or not the password is currently visible. Only applies to password input types.",
              "attribute": "password-visible"
            },
            {
              "kind": "field",
              "name": "autocorrect",
              "type": "string",
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "attribute": "autocorrect",
              "enum": [
                "off",
                "on"
              ]
            },
            {
              "kind": "field",
              "name": "autoFocus",
              "type": "boolean",
              "default": false,
              "description": "Indicates that the input should receive focus on page load.",
              "attribute": "autoFocus"
            },
            {
              "kind": "field",
              "name": "enterkeyhint",
              "type": "string",
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "attribute": "enterkeyhint",
              "enum": [
                "done",
                "enter",
                "go",
                "next",
                "previous",
                "search",
                "send"
              ]
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": "boolean",
              "default": true,
              "description": "Enables spell checking on the input.",
              "attribute": "spellcheck"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": "string",
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\nkeyboard on supportive devices.",
              "attribute": "inputmode",
              "enum": [
                "decimal",
                "email",
                "none",
                "numeric",
                "search",
                "tel",
                "text",
                "url"
              ]
            },
            {
              "kind": "field",
              "name": "form_id",
              "type": "string",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "attribute": "form_id",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": "boolean",
              "default": false,
              "description": "Indicates that input accepts multiple email addresses.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#multiple",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number | \"any\" | undefined"
              },
              "description": "Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\nimplied, allowing any numeric value. Only applies to date and number input types.",
              "attribute": "step",
              "anyOf": [
                {
                  "enum": [
                    "any"
                  ],
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": "string",
              "description": "Describes what, if any, type of autocomplete functionality the input\nshould provide.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete",
              "attribute": "autocomplete",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "nativeError",
              "type": "boolean",
              "privacy": "private",
              "default": false,
              "description": "Whether or not a native error has been reported via `reportValidity()`."
            },
            {
              "kind": "field",
              "name": "nativeErrorText",
              "type": "string",
              "privacy": "private",
              "default": "",
              "description": "The validation message displayed from a native error via\n`reportValidity()`."
            },
            {
              "kind": "method",
              "name": "getInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selectionDirection",
              "description": "Gets or sets the direction in which selection occurred.",
              "anyOf": [
                {
                  "enum": [
                    "backward",
                    "forward",
                    "none"
                  ],
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            },
            {
              "kind": "field",
              "name": "selectionEnd",
              "description": "Gets or sets the end position or offset of a text selection.",
              "type": [
                "null",
                "number"
              ]
            },
            {
              "kind": "field",
              "name": "selectionStart",
              "description": "Gets or sets the starting position or offset of a text selection.",
              "type": [
                "null",
                "number"
              ]
            },
            {
              "kind": "field",
              "name": "valueAsNumber",
              "description": "The text field's value as a number.",
              "type": "number"
            },
            {
              "kind": "field",
              "name": "valueAsDate",
              "description": "The text field's value as a Date.",
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ]
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true,
              "type": "string"
            },
            {
              "kind": "field",
              "name": "hasError",
              "privacy": "private",
              "readonly": true,
              "type": "boolean"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePasswordToggle",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the input."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the input."
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the text field.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select"
            },
            {
              "kind": "method",
              "name": "getErrorText",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Replaces a range of text with a new string."
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionMode",
                  "optional": true,
                  "type": {
                    "text": "SelectionMode"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number | null"
                  },
                  "description": "The offset into the text field for the start of the selection."
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number | null"
                  },
                  "description": "The offset into the text field for the end of the selection."
                },
                {
                  "name": "direction",
                  "optional": true,
                  "type": {
                    "text": "\"forward\" | \"backward\" | \"none\""
                  },
                  "description": "The direction in which the selection is performed."
                }
              ],
              "description": "Sets the start and end positions of the text selection (0-based)."
            },
            {
              "kind": "method",
              "name": "stepDown",
              "parameters": [
                {
                  "name": "stepDecrement",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "The number of steps to decrement, defaults to 1."
                }
              ],
              "description": "Decrements the value of a numeric input type by the value of the step attribute."
            },
            {
              "kind": "method",
              "name": "stepUp",
              "parameters": [
                {
                  "name": "stepIncrement",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "The number of steps to increment, defaults to 1."
                }
              ],
              "description": "Increments the value of a numeric input type by the value of the step attribute."
            },
            {
              "kind": "method",
              "name": "showPicker",
              "description": "Displays the browser picker for an input element (only works if the browser supports it for the input type)."
            },
            {
              "kind": "method",
              "name": "reset",
              "description": "Reset the text field to its default value."
            },
            {
              "kind": "method",
              "name": "handleStepChange"
            },
            {
              "kind": "method",
              "name": "getFormValue"
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getValidityAnchor"
            },
            {
              "kind": "method",
              "name": "getState"
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderClearIcon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderPasswordToggle",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderErrorText",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderHelpText",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": "string",
              "default": "text",
              "description": "The `<input>` type to use, defaults to \"text\". The type greatly changes how\nthe text field behaves.\n\nText fields support a limited number of `<input>` types:\n\n- text\n- email\n- number\n- password\n- search\n- tel\n- url\n- date\n- datetime-local\n- time",
              "fieldName": "type",
              "enum": [
                "color",
                "date",
                "email",
                "file",
                "month",
                "number",
                "password",
                "search",
                "tel",
                "text",
                "url",
                "week"
              ]
            },
            {
              "name": "title",
              "type": "string",
              "default": "",
              "description": "the title of the input element",
              "fieldName": "title"
            },
            {
              "name": "error",
              "type": "boolean",
              "default": false,
              "description": "Gets or sets whether or not the text field is in a visually invalid state.\n\nThis error state overrides the error state controlled by\n`reportValidity()`.",
              "fieldName": "error"
            },
            {
              "name": "error-text",
              "type": "string",
              "default": "",
              "description": "The error message that replaces supporting text when `error` is true. If\n`errorText` is an empty string, then the supporting text will continue to\nshow.\n\nThis error message overrides the error message displayed by\n`reportValidity()`.",
              "fieldName": "errorText"
            },
            {
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The input's label. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "no-asterisk",
              "type": "boolean",
              "default": false,
              "description": "Disables the asterisk on the label, when the text field is required.",
              "fieldName": "noAsterisk"
            },
            {
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "Makes the input a required field. Additionally the floating label will render an asterisk \"*\" when true.",
              "fieldName": "required"
            },
            {
              "name": "value",
              "type": "string",
              "default": "",
              "description": "The current value of the input, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "help-text",
              "type": "string",
              "default": "",
              "description": "The input's help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "clearable",
              "type": "boolean",
              "default": false,
              "description": "Adds a clear button when the input is not empty.",
              "fieldName": "clearable"
            },
            {
              "name": "max",
              "type": "string",
              "description": "Defines the greatest value in the range of permitted values.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max",
              "fieldName": "max"
            },
            {
              "name": "maxlength",
              "type": "number",
              "description": "The maximum number of characters a user can enter into the text field. Set\nto -1 for none.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength",
              "fieldName": "maxlength"
            },
            {
              "name": "min",
              "type": "string",
              "description": "Defines the most negative value in the range of permitted values.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min",
              "fieldName": "min"
            },
            {
              "name": "minlength",
              "type": "number",
              "description": "The minimum number of characters a user can enter into the text field. Set\nto -1 for none.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength",
              "fieldName": "minlength"
            },
            {
              "name": "no-spinner",
              "type": "boolean",
              "default": false,
              "description": "Hides the browser's built-in increment/decrement spin buttons for number inputs.",
              "fieldName": "noSpinner"
            },
            {
              "name": "pattern",
              "type": "string",
              "description": "A regular expression pattern to validate input against.",
              "fieldName": "pattern"
            },
            {
              "name": "placeholder",
              "type": "string",
              "default": "",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "readonly",
              "type": "boolean",
              "default": false,
              "description": "Makes the input readonly.",
              "fieldName": "readonly"
            },
            {
              "name": "password-toggle",
              "type": "boolean",
              "default": false,
              "description": "Adds a button to toggle the password's visibility. Only applies to password types.",
              "fieldName": "passwordToggle"
            },
            {
              "name": "password-visible",
              "type": "boolean",
              "default": false,
              "description": "Determines whether or not the password is currently visible. Only applies to password input types.",
              "fieldName": "passwordVisible"
            },
            {
              "name": "autocorrect",
              "type": "string",
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "fieldName": "autocorrect",
              "enum": [
                "off",
                "on"
              ]
            },
            {
              "name": "autoFocus",
              "type": "boolean",
              "default": false,
              "description": "Indicates that the input should receive focus on page load.",
              "fieldName": "autoFocus"
            },
            {
              "name": "enterkeyhint",
              "type": "string",
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "fieldName": "enterkeyhint",
              "enum": [
                "done",
                "enter",
                "go",
                "next",
                "previous",
                "search",
                "send"
              ]
            },
            {
              "name": "spellcheck",
              "type": "boolean",
              "default": true,
              "description": "Enables spell checking on the input.",
              "fieldName": "spellcheck"
            },
            {
              "name": "inputmode",
              "type": "string",
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\nkeyboard on supportive devices.",
              "fieldName": "inputmode",
              "enum": [
                "decimal",
                "email",
                "none",
                "numeric",
                "search",
                "tel",
                "text",
                "url"
              ]
            },
            {
              "name": "form_id",
              "type": "string",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "fieldName": "form_id"
            },
            {
              "name": "multiple",
              "type": "boolean",
              "default": false,
              "description": "Indicates that input accepts multiple email addresses.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#multiple",
              "fieldName": "multiple"
            },
            {
              "name": "step",
              "type": {
                "text": "number | \"any\" | undefined"
              },
              "description": "Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\nimplied, allowing any numeric value. Only applies to date and number input types.",
              "fieldName": "step",
              "anyOf": [
                {
                  "enum": [
                    "any"
                  ],
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            },
            {
              "name": "autocomplete",
              "type": "string",
              "description": "Describes what, if any, type of autocomplete functionality the input\nshould provide.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete",
              "fieldName": "autocomplete"
            }
          ],
          "superclass": {
            "name": "InputBaseClass",
            "module": "src/components/input/input.ts"
          },
          "tagName": "sd-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdInput",
            "module": "src/components/input/input.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-input",
          "declaration": {
            "name": "SdInput",
            "module": "src/components/input/input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/link/link.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdLink",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": "string",
              "default": "m",
              "attribute": "size",
              "enum": [
                "l",
                "m",
                "s",
                "xl"
              ]
            },
            {
              "kind": "field",
              "name": "href",
              "type": "string",
              "default": "",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "download",
              "type": "string",
              "default": "",
              "attribute": "download"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": "string",
              "default": "m",
              "fieldName": "size",
              "enum": [
                "l",
                "m",
                "s",
                "xl"
              ]
            },
            {
              "name": "href",
              "type": "string",
              "default": "",
              "fieldName": "href"
            },
            {
              "name": "download",
              "type": "string",
              "default": "",
              "fieldName": "download"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sd-link",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdLink",
            "module": "src/components/link/link.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-link",
          "declaration": {
            "name": "SdLink",
            "module": "src/components/link/link.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu/menu-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdMenuItem",
          "members": [
            {
              "kind": "field",
              "name": "cachedTextLabel",
              "type": "string",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "menuItem",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": "string",
              "default": "normal",
              "description": "The type of menu item to render. To use `checked`, this value must be set to `checkbox`.",
              "attribute": "type",
              "enum": [
                "checkbox",
                "normal"
              ]
            },
            {
              "kind": "field",
              "name": "checked",
              "type": "boolean",
              "default": false,
              "description": "Draws the item in a checked state.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": "string",
              "default": "",
              "description": "A unique value to store in the menu item. This can be used as a way to identify menu items when selected.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "loading",
              "type": "boolean",
              "default": false,
              "description": "Draws the menu item in a loading state.",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Draws the menu item in a disabled state, preventing selection.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "submenuSlot",
              "type": "array"
            },
            {
              "kind": "method",
              "name": "submenuController",
              "type": "object",
              "privacy": "private",
              "default": "new SubmenuController(this)",
              "description": "A reactive controller to manage the registration of event listeners for submenus.",
              "properties": {
                "host": {},
                "popupRef": {},
                "enableSubmenuTimer": {
                  "type": "number",
                  "default": -1
                },
                "isConnected": {
                  "type": "boolean",
                  "default": false
                },
                "isPopupConnected": {
                  "type": "boolean",
                  "default": false
                },
                "skidding": {
                  "type": "number",
                  "default": 0
                },
                "submenuOpenDelay": {
                  "type": "number",
                  "enum": [
                    100
                  ],
                  "default": 100
                },
                "handleMouseMove": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handleMouseOver": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handleKeyDown": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handleClick": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handleFocusOut": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handlePopupMouseover": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handlePopupReposition": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleHostClick",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleMouseOver",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleCheckedChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleTypeChange"
            },
            {
              "kind": "method",
              "name": "getTextLabel",
              "description": "Returns a text label based on the contents of the menu item's default slot."
            },
            {
              "kind": "method",
              "name": "hasSubmenu"
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": "string",
              "default": "normal",
              "description": "The type of menu item to render. To use `checked`, this value must be set to `checkbox`.",
              "fieldName": "type",
              "enum": [
                "checkbox",
                "normal"
              ]
            },
            {
              "name": "checked",
              "type": "boolean",
              "default": false,
              "description": "Draws the item in a checked state.",
              "fieldName": "checked"
            },
            {
              "name": "value",
              "type": "string",
              "default": "",
              "description": "A unique value to store in the menu item. This can be used as a way to identify menu items when selected.",
              "fieldName": "value"
            },
            {
              "name": "loading",
              "type": "boolean",
              "default": false,
              "description": "Draws the menu item in a loading state.",
              "fieldName": "loading"
            },
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Draws the menu item in a disabled state, preventing selection.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-menu-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdMenuItem",
            "module": "src/components/menu/menu-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-menu-item",
          "declaration": {
            "name": "SdMenuItem",
            "module": "src/components/menu/menu-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu/menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdMenu",
          "members": [
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isMenuItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdMenu",
            "module": "src/components/menu/menu.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-menu",
          "declaration": {
            "name": "SdMenu",
            "module": "src/components/menu/menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu/submenu-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A reactive controller to manage the registration of event listeners for submenus.",
          "name": "SubmenuController",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost & SdMenuItem"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "popupRef",
              "type": {
                "text": "Ref<SdPopup>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "enableSubmenuTimer",
              "type": "number",
              "privacy": "private",
              "default": -1
            },
            {
              "kind": "field",
              "name": "isConnected",
              "type": "boolean",
              "privacy": "private",
              "default": false
            },
            {
              "kind": "field",
              "name": "isPopupConnected",
              "type": "boolean",
              "privacy": "private",
              "default": false
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": "number",
              "privacy": "private",
              "default": 0
            },
            {
              "kind": "field",
              "name": "submenuOpenDelay",
              "type": "number",
              "privacy": "private",
              "readonly": true,
              "default": 100,
              "enum": [
                100
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "method",
              "name": "hostUpdated"
            },
            {
              "kind": "method",
              "name": "addListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleMouseMove",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleMouseOver",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleSubmenuEntry",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleFocusOut",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handlePopupMouseover",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handlePopupReposition",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "setSubmenuState",
              "privacy": "private",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "enableSubmenu",
              "privacy": "private",
              "parameters": [
                {
                  "name": "delay",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "disableSubmenu",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateSkidding",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "isExpanded",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderSubmenu"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SubmenuController",
          "declaration": {
            "name": "SubmenuController",
            "module": "src/components/menu/submenu-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/pagination/pagination.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdPagination",
          "members": [
            {
              "kind": "field",
              "name": "count",
              "type": "number",
              "default": 1,
              "description": "the total number of pages.",
              "attribute": "count",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "currentPage",
              "type": "number",
              "default": 1,
              "description": "the current selected page. the count start from 1",
              "attribute": "current-page"
            },
            {
              "kind": "field",
              "name": "siblingCount",
              "type": "number",
              "default": 2,
              "description": "Number of visible page buttons before and after the current page button.",
              "attribute": "sibling-count"
            },
            {
              "kind": "method",
              "name": "changePage",
              "privacy": "private",
              "parameters": [
                {
                  "name": "newIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePageNavBtn",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "i",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderPageButton",
              "privacy": "private",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selected",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderEllipsis",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "count",
              "type": "number",
              "default": 1,
              "description": "the total number of pages.",
              "fieldName": "count"
            },
            {
              "name": "current-page",
              "type": "number",
              "default": 1,
              "description": "the current selected page. the count start from 1",
              "fieldName": "currentPage"
            },
            {
              "name": "sibling-count",
              "type": "number",
              "default": 2,
              "description": "Number of visible page buttons before and after the current page button.",
              "fieldName": "siblingCount"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-pagination",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdPagination",
            "module": "src/components/pagination/pagination.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-pagination",
          "declaration": {
            "name": "SdPagination",
            "module": "src/components/pagination/pagination.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/popup/popup.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdPopup",
          "members": [
            {
              "kind": "field",
              "name": "anchorEl",
              "type": {
                "text": "Element | null | undefined"
              },
              "privacy": "private",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "null"
                }
              ]
            },
            {
              "kind": "field",
              "name": "cleanup",
              "type": {
                "text": "ReturnType<typeof autoUpdate> | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "A reference to the internal popup container. Useful for animating and styling the popup with JavaScript."
            },
            {
              "kind": "field",
              "name": "arrowEl",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "Element | string | undefined"
              },
              "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can provide the anchor\nelement `id`, a DOM element reference, or a `VirtualElement`. If the anchor lives inside the popup, use the\n`anchor` slot instead.",
              "attribute": "anchor",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "string"
                }
              ]
            },
            {
              "kind": "field",
              "name": "active",
              "type": "boolean",
              "default": false,
              "description": "Activates the positioning logic and shows the popup. When this attribute is removed, the positioning logic is torn\ndown and the popup will be hidden.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": "string",
              "default": "top",
              "description": "The preferred placement of the popup. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",
              "attribute": "placement",
              "reflects": true,
              "enum": [
                "bottom",
                "bottom-end",
                "bottom-start",
                "left",
                "left-end",
                "left-start",
                "right",
                "right-end",
                "right-start",
                "top",
                "top-end",
                "top-start"
              ]
            },
            {
              "kind": "field",
              "name": "strategy",
              "type": "string",
              "default": "absolute",
              "description": "Determines how the popup is positioned. The `absolute` strategy works well in most cases, but if overflow is\nclipped, using a `fixed` position strategy can often workaround it.",
              "attribute": "strategy",
              "reflects": true,
              "enum": [
                "absolute",
                "fixed"
              ]
            },
            {
              "kind": "field",
              "name": "distance",
              "type": "number",
              "default": 0,
              "description": "The distance in pixels from which to offset the panel away from its anchor.",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": "number",
              "default": 0,
              "description": "The distance in pixels from which to offset the panel along its anchor.",
              "attribute": "skidding"
            },
            {
              "kind": "field",
              "name": "arrow",
              "type": "boolean",
              "default": false,
              "description": "Attaches an arrow to the popup. The arrow's size and color can be customized using the `--arrow-size` and\n`--arrow-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",
              "attribute": "arrow"
            },
            {
              "kind": "field",
              "name": "arrowPlacement",
              "type": "string",
              "default": "anchor",
              "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",
              "attribute": "arrow-placement",
              "enum": [
                "anchor",
                "center",
                "end",
                "start"
              ]
            },
            {
              "kind": "field",
              "name": "arrowPadding",
              "type": "number",
              "default": 10,
              "description": "The amount of padding between the arrow and the edges of the popup. If the popup has a border-radius, for example,\nthis will prevent it from overflowing the corners.",
              "attribute": "arrow-padding"
            },
            {
              "kind": "field",
              "name": "flip",
              "type": "boolean",
              "default": false,
              "description": "When set, placement of the popup will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",
              "attribute": "flip"
            },
            {
              "kind": "field",
              "name": "flipFallbackPlacements",
              "type": "string",
              "default": "",
              "description": "If the preferred placement doesn't fit, popup will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead.",
              "attribute": "flip-fallback-placements"
            },
            {
              "kind": "field",
              "name": "flipFallbackStrategy",
              "type": "string",
              "default": "best-fit",
              "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popup should be positioned using the best available fit based on available space or as it was initially\npreferred.",
              "attribute": "flip-fallback-strategy",
              "enum": [
                "best-fit",
                "initial"
              ]
            },
            {
              "kind": "field",
              "name": "flipBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "attribute": "flipBoundary",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Element"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "flipPadding",
              "type": "number",
              "default": 0,
              "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur.",
              "attribute": "flip-padding"
            },
            {
              "kind": "field",
              "name": "shift",
              "type": "boolean",
              "default": false,
              "description": "Moves the popup along the axis to keep it in view when clipped.",
              "attribute": "shift"
            },
            {
              "kind": "field",
              "name": "shiftBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "attribute": "shiftBoundary",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Element"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "shiftPadding",
              "type": "number",
              "default": 0,
              "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur.",
              "attribute": "shift-padding"
            },
            {
              "kind": "field",
              "name": "autoSize",
              "type": "string",
              "description": "When set, this will cause the popup to automatically resize itself to prevent it from overflowing.",
              "attribute": "auto-size",
              "enum": [
                "both",
                "horizontal",
                "vertical"
              ]
            },
            {
              "kind": "field",
              "name": "sync",
              "type": "string",
              "description": "Syncs the popup's width or height to that of the anchor element.",
              "attribute": "sync",
              "enum": [
                "both",
                "height",
                "width"
              ]
            },
            {
              "kind": "field",
              "name": "autoSizeBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "attribute": "autoSizeBoundary",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Element"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "autoSizePadding",
              "type": "number",
              "default": 0,
              "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",
              "attribute": "auto-size-padding"
            },
            {
              "kind": "field",
              "name": "hoverBridge",
              "type": "boolean",
              "default": false,
              "description": "When a gap exists between the anchor and the popup element, this option will add a \"hover bridge\" that fills the\ngap using an invisible element. This makes listening for events such as `mouseenter` and `mouseleave` more sane\nbecause the pointer never technically leaves the element. The hover bridge will only be drawn when the popover is\nactive.",
              "attribute": "hover-bridge"
            },
            {
              "kind": "method",
              "name": "getPopup",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getArrowElement",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleAnchorChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "start",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "stop",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Forces the popup to recalculate and reposition itself."
            },
            {
              "kind": "field",
              "name": "updateHoverBridge",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            }
          ],
          "attributes": [
            {
              "name": "anchor",
              "type": {
                "text": "Element | string | undefined"
              },
              "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can provide the anchor\nelement `id`, a DOM element reference, or a `VirtualElement`. If the anchor lives inside the popup, use the\n`anchor` slot instead.",
              "fieldName": "anchor",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "string"
                }
              ]
            },
            {
              "name": "active",
              "type": "boolean",
              "default": false,
              "description": "Activates the positioning logic and shows the popup. When this attribute is removed, the positioning logic is torn\ndown and the popup will be hidden.",
              "fieldName": "active"
            },
            {
              "name": "placement",
              "type": "string",
              "default": "top",
              "description": "The preferred placement of the popup. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",
              "fieldName": "placement",
              "enum": [
                "bottom",
                "bottom-end",
                "bottom-start",
                "left",
                "left-end",
                "left-start",
                "right",
                "right-end",
                "right-start",
                "top",
                "top-end",
                "top-start"
              ]
            },
            {
              "name": "strategy",
              "type": "string",
              "default": "absolute",
              "description": "Determines how the popup is positioned. The `absolute` strategy works well in most cases, but if overflow is\nclipped, using a `fixed` position strategy can often workaround it.",
              "fieldName": "strategy",
              "enum": [
                "absolute",
                "fixed"
              ]
            },
            {
              "name": "distance",
              "type": "number",
              "default": 0,
              "description": "The distance in pixels from which to offset the panel away from its anchor.",
              "fieldName": "distance"
            },
            {
              "name": "skidding",
              "type": "number",
              "default": 0,
              "description": "The distance in pixels from which to offset the panel along its anchor.",
              "fieldName": "skidding"
            },
            {
              "name": "arrow",
              "type": "boolean",
              "default": false,
              "description": "Attaches an arrow to the popup. The arrow's size and color can be customized using the `--arrow-size` and\n`--arrow-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",
              "fieldName": "arrow"
            },
            {
              "name": "arrow-placement",
              "type": "string",
              "default": "anchor",
              "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",
              "fieldName": "arrowPlacement",
              "enum": [
                "anchor",
                "center",
                "end",
                "start"
              ]
            },
            {
              "name": "arrow-padding",
              "type": "number",
              "default": 10,
              "description": "The amount of padding between the arrow and the edges of the popup. If the popup has a border-radius, for example,\nthis will prevent it from overflowing the corners.",
              "fieldName": "arrowPadding"
            },
            {
              "name": "flip",
              "type": "boolean",
              "default": false,
              "description": "When set, placement of the popup will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",
              "fieldName": "flip"
            },
            {
              "name": "flip-fallback-placements",
              "type": "string",
              "default": "",
              "description": "If the preferred placement doesn't fit, popup will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead.",
              "fieldName": "flipFallbackPlacements"
            },
            {
              "name": "flip-fallback-strategy",
              "type": "string",
              "default": "best-fit",
              "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popup should be positioned using the best available fit based on available space or as it was initially\npreferred.",
              "fieldName": "flipFallbackStrategy",
              "enum": [
                "best-fit",
                "initial"
              ]
            },
            {
              "name": "flipBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "fieldName": "flipBoundary",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Element"
                  }
                }
              ]
            },
            {
              "name": "flip-padding",
              "type": "number",
              "default": 0,
              "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur.",
              "fieldName": "flipPadding"
            },
            {
              "name": "shift",
              "type": "boolean",
              "default": false,
              "description": "Moves the popup along the axis to keep it in view when clipped.",
              "fieldName": "shift"
            },
            {
              "name": "shiftBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "fieldName": "shiftBoundary",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Element"
                  }
                }
              ]
            },
            {
              "name": "shift-padding",
              "type": "number",
              "default": 0,
              "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur.",
              "fieldName": "shiftPadding"
            },
            {
              "name": "auto-size",
              "type": "string",
              "description": "When set, this will cause the popup to automatically resize itself to prevent it from overflowing.",
              "fieldName": "autoSize",
              "enum": [
                "both",
                "horizontal",
                "vertical"
              ]
            },
            {
              "name": "sync",
              "type": "string",
              "description": "Syncs the popup's width or height to that of the anchor element.",
              "fieldName": "sync",
              "enum": [
                "both",
                "height",
                "width"
              ]
            },
            {
              "name": "autoSizeBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "fieldName": "autoSizeBoundary",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Element"
                  }
                }
              ]
            },
            {
              "name": "auto-size-padding",
              "type": "number",
              "default": 0,
              "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",
              "fieldName": "autoSizePadding"
            },
            {
              "name": "hover-bridge",
              "type": "boolean",
              "default": false,
              "description": "When a gap exists between the anchor and the popup element, this option will add a \"hover bridge\" that fills the\ngap using an invisible element. This makes listening for events such as `mouseenter` and `mouseleave` more sane\nbecause the pointer never technically leaves the element. The hover bridge will only be drawn when the popover is\nactive.",
              "fieldName": "hoverBridge"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-popup",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdPopup",
            "module": "src/components/popup/popup.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-popup",
          "declaration": {
            "name": "SdPopup",
            "module": "src/components/popup/popup.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio/radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdRadio",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sd-radio",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdRadio",
            "module": "src/components/radio/radio.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-radio",
          "declaration": {
            "name": "SdRadio",
            "module": "src/components/radio/radio.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio/single-selection-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A `ReactiveController` that provides root node-scoped single selection for\r\nelements, similar to native `<input type=\"radio\">` selection.\r\n\r\nTo use, elements should add the controller and call\r\n`selectionController.handleCheckedChange()` in a getter/setter. This must\r\nbe synchronous to match native behavior.",
          "name": "SingleSelectionController",
          "members": [
            {
              "kind": "field",
              "name": "controls",
              "type": "array",
              "description": "All single selection elements in the host element's root with the same\n`name` attribute, including the host element.",
              "readonly": true,
              "items": [
                {
                  "$ref": "#/definitions/SingleSelectionElement"
                }
              ],
              "minItems": 1,
              "additionalItems": {
                "description": "An element that supports single-selection with `SingleSelectionController`.",
                "type": "object",
                "properties": {
                  "checked": {
                    "description": "Whether or not the element is selected.",
                    "type": "boolean"
                  },
                  "accessKey": {
                    "type": "string"
                  },
                  "accessKeyLabel": {
                    "type": "string"
                  },
                  "autocapitalize": {
                    "type": "string"
                  },
                  "dir": {
                    "type": "string"
                  },
                  "draggable": {
                    "type": "boolean"
                  },
                  "hidden": {
                    "type": "boolean"
                  },
                  "inert": {
                    "type": "boolean"
                  },
                  "innerText": {
                    "type": "string"
                  },
                  "lang": {
                    "type": "string"
                  },
                  "offsetHeight": {
                    "type": "number"
                  },
                  "offsetLeft": {
                    "type": "number"
                  },
                  "offsetParent": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Element"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "offsetTop": {
                    "type": "number"
                  },
                  "offsetWidth": {
                    "type": "number"
                  },
                  "outerText": {
                    "type": "string"
                  },
                  "spellcheck": {
                    "type": "boolean"
                  },
                  "title": {
                    "type": "string"
                  },
                  "translate": {
                    "type": "boolean"
                  },
                  "attributes": {
                    "type": "object",
                    "additionalProperties": false,
                    "patternProperties": {
                      "^[0-9]+$": {
                        "$ref": "#/definitions/Attr"
                      }
                    }
                  },
                  "classList": {
                    "type": "object",
                    "additionalProperties": false,
                    "patternProperties": {
                      "^[0-9]+$": {
                        "type": "string"
                      }
                    }
                  },
                  "className": {
                    "type": "string"
                  },
                  "clientHeight": {
                    "type": "number"
                  },
                  "clientLeft": {
                    "type": "number"
                  },
                  "clientTop": {
                    "type": "number"
                  },
                  "clientWidth": {
                    "type": "number"
                  },
                  "id": {
                    "type": "string"
                  },
                  "localName": {
                    "type": "string"
                  },
                  "namespaceURI": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "onfullscreenchange": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onfullscreenerror": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "outerHTML": {
                    "type": "string"
                  },
                  "ownerDocument": {
                    "$ref": "#/definitions/Document"
                  },
                  "part": {
                    "type": "object",
                    "additionalProperties": false,
                    "patternProperties": {
                      "^[0-9]+$": {
                        "type": "string"
                      }
                    }
                  },
                  "prefix": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "scrollHeight": {
                    "type": "number"
                  },
                  "scrollLeft": {
                    "type": "number"
                  },
                  "scrollTop": {
                    "type": "number"
                  },
                  "scrollWidth": {
                    "type": "number"
                  },
                  "shadowRoot": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ShadowRoot"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "slot": {
                    "type": "string"
                  },
                  "tagName": {
                    "type": "string"
                  },
                  "baseURI": {
                    "type": "string"
                  },
                  "childNodes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ChildNode"
                    }
                  },
                  "firstChild": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ChildNode"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "isConnected": {
                    "type": "boolean"
                  },
                  "lastChild": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ChildNode"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "nextSibling": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ChildNode"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "nodeName": {
                    "type": "string"
                  },
                  "nodeType": {
                    "type": "number"
                  },
                  "nodeValue": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "parentElement": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/HTMLElement"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "parentNode": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ParentNode"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "previousSibling": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ChildNode"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "textContent": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ATTRIBUTE_NODE": {
                    "type": "number"
                  },
                  "CDATA_SECTION_NODE": {
                    "type": "number"
                  },
                  "COMMENT_NODE": {
                    "type": "number"
                  },
                  "DOCUMENT_FRAGMENT_NODE": {
                    "type": "number"
                  },
                  "DOCUMENT_NODE": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_CONTAINED_BY": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_CONTAINS": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_DISCONNECTED": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_FOLLOWING": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_PRECEDING": {
                    "type": "number"
                  },
                  "DOCUMENT_TYPE_NODE": {
                    "type": "number"
                  },
                  "ELEMENT_NODE": {
                    "type": "number"
                  },
                  "ENTITY_NODE": {
                    "type": "number"
                  },
                  "ENTITY_REFERENCE_NODE": {
                    "type": "number"
                  },
                  "NOTATION_NODE": {
                    "type": "number"
                  },
                  "PROCESSING_INSTRUCTION_NODE": {
                    "type": "number"
                  },
                  "TEXT_NODE": {
                    "type": "number"
                  },
                  "ariaAtomic": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaAutoComplete": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaBusy": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaChecked": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaColCount": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaColIndex": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaColSpan": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaCurrent": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaDisabled": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaExpanded": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaHasPopup": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaHidden": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaKeyShortcuts": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaLabel": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaLevel": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaLive": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaModal": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaMultiLine": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaMultiSelectable": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaOrientation": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaPlaceholder": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaPosInSet": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaPressed": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaReadOnly": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaRequired": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaRoleDescription": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaRowCount": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaRowIndex": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaRowSpan": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaSelected": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaSetSize": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaSort": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaValueMax": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaValueMin": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaValueNow": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaValueText": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "innerHTML": {
                    "type": "string"
                  },
                  "nextElementSibling": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Element"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "previousElementSibling": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Element"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "childElementCount": {
                    "type": "number"
                  },
                  "children": {
                    "type": "object",
                    "additionalProperties": false,
                    "patternProperties": {
                      "^[0-9]+$": {
                        "$ref": "#/definitions/Element"
                      }
                    }
                  },
                  "firstElementChild": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Element"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "lastElementChild": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Element"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "assignedSlot": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/HTMLSlotElement"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "oncopy": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "oncut": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpaste": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "style": {
                    "type": "object",
                    "additionalProperties": false,
                    "patternProperties": {
                      "^[0-9]+$": {
                        "type": "string"
                      }
                    }
                  },
                  "contentEditable": {
                    "type": "string"
                  },
                  "enterKeyHint": {
                    "type": "string"
                  },
                  "inputMode": {
                    "type": "string"
                  },
                  "isContentEditable": {
                    "type": "boolean"
                  },
                  "onabort": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onanimationcancel": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onanimationend": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onanimationiteration": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onanimationstart": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onauxclick": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onblur": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "oncanplay": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "oncanplaythrough": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onchange": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onclick": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onclose": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "oncontextmenu": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "oncuechange": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondblclick": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondrag": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondragend": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondragenter": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondragleave": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondragover": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondragstart": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondrop": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondurationchange": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onemptied": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onended": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onerror": {
                    "$ref": "#/definitions/OnErrorEventHandler"
                  },
                  "onfocus": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onformdata": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ongotpointercapture": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "oninput": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "oninvalid": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onkeydown": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onkeypress": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onkeyup": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onload": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onloadeddata": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onloadedmetadata": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onloadstart": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onlostpointercapture": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onmousedown": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onmouseenter": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onmouseleave": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onmousemove": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onmouseout": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onmouseover": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onmouseup": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpause": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onplay": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onplaying": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpointercancel": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpointerdown": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpointerenter": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpointerleave": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpointermove": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpointerout": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpointerover": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpointerup": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onprogress": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onratechange": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onreset": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onresize": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onscroll": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onsecuritypolicyviolation": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onseeked": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onseeking": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onselect": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onselectionchange": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onselectstart": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onslotchange": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onstalled": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onsubmit": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onsuspend": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontimeupdate": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontoggle": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontouchcancel": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontouchend": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontouchmove": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontouchstart": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontransitioncancel": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontransitionend": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontransitionrun": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontransitionstart": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onvolumechange": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onwaiting": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onwebkitanimationend": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onwebkitanimationiteration": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onwebkitanimationstart": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onwebkittransitionend": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onwheel": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "autofocus": {
                    "type": "boolean"
                  },
                  "dataset": {
                    "$ref": "#/definitions/DOMStringMap"
                  },
                  "nonce": {
                    "type": "string"
                  },
                  "tabIndex": {
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": "boolean",
              "privacy": "private",
              "default": false
            },
            {
              "kind": "field",
              "name": "root",
              "type": {
                "text": "ParentNode | null"
              },
              "privacy": "private",
              "default": null,
              "anyOf": [
                {
                  "$ref": "#/definitions/ParentNode"
                },
                {
                  "type": "null"
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "method",
              "name": "handleCheckedChange",
              "description": "Should be called whenever the host's `checked` property changes\r\nsynchronously."
            },
            {
              "kind": "field",
              "name": "handleFocusIn",
              "privacy": "private",
              "readonly": true,
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleFocusOut",
              "privacy": "private",
              "readonly": true,
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "uncheckSiblings",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateTabIndices",
              "privacy": "private",
              "description": "Updates the `tabindex` of the host and its siblings."
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "readonly": true,
              "description": "Handles arrow key events from the host. Using the arrow keys will\nselect and check the next or previous sibling with the host's\n`name` attribute.",
              "type": "object",
              "additionalProperties": false
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SingleSelectionController",
          "declaration": {
            "name": "SingleSelectionController",
            "module": "src/components/radio/single-selection-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/rating/rating.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdRating",
          "members": [
            {
              "kind": "field",
              "name": "rating",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "hoverValue",
              "type": "number",
              "privacy": "private",
              "default": 0
            },
            {
              "kind": "field",
              "name": "isHovering",
              "type": "boolean",
              "privacy": "private",
              "default": false
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": "boolean",
              "default": false,
              "attribute": "readonly"
            },
            {
              "kind": "field",
              "name": "label",
              "type": "string",
              "default": "",
              "description": "A label for accesibility.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the rating.",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "value",
              "type": "number",
              "default": 0,
              "description": "The current rating.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "max",
              "type": "number",
              "default": 5,
              "description": "Maximum rating.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "precision",
              "type": "number",
              "default": 1,
              "description": "define the minimum increment value change allowed.",
              "attribute": "precision"
            },
            {
              "kind": "field",
              "name": "getSymbol",
              "type": "object",
              "description": "A function that customizes the symbol to be rendered. The first and only argument is the rating's current value.\nThe function should return a string containing trusted HTML of the symbol to render at the specified value.",
              "attribute": "getSymbol",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "getValueFromMousePosition",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getValueFromTouchPosition",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getValueFromXCoordinate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "coordinate",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseEnter",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseLeave",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleTouchStart",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTouchMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTouchEnd",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "roundToPrecision",
              "privacy": "private",
              "parameters": [
                {
                  "name": "numberToRound",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "precision",
                  "default": "0.5"
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleHoverValueChange"
            },
            {
              "kind": "method",
              "name": "handleIsHoveringChange"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the rating."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the rating."
            }
          ],
          "attributes": [
            {
              "name": "readonly",
              "type": "boolean",
              "default": false,
              "fieldName": "readonly"
            },
            {
              "name": "label",
              "type": "string",
              "default": "",
              "description": "A label for accesibility.",
              "fieldName": "label"
            },
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the rating.",
              "fieldName": "disabled"
            },
            {
              "name": "value",
              "type": "number",
              "default": 0,
              "description": "The current rating.",
              "fieldName": "value"
            },
            {
              "name": "max",
              "type": "number",
              "default": 5,
              "description": "Maximum rating.",
              "fieldName": "max"
            },
            {
              "name": "precision",
              "type": "number",
              "default": 1,
              "description": "define the minimum increment value change allowed.",
              "fieldName": "precision"
            },
            {
              "name": "getSymbol",
              "type": "object",
              "description": "A function that customizes the symbol to be rendered. The first and only argument is the rating's current value.\nThe function should return a string containing trusted HTML of the symbol to render at the specified value.",
              "fieldName": "getSymbol",
              "additionalProperties": false
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-rating",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdRating",
            "module": "src/components/rating/rating.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-rating",
          "declaration": {
            "name": "SdRating",
            "module": "src/components/rating/rating.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select-option.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdOption",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": "string",
              "default": "",
              "description": "The option's value. When selected, the containing form control will receive this value. The value must be unique\nfrom other options in the same group. Values may not contain spaces, as spaces are used as delimiters when listing\nmultiple values.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Draws the option in a disabled state, preventing selection.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "cachedTextLabel",
              "type": "string",
              "privacy": "private",
              "default": ""
            },
            {
              "kind": "field",
              "name": "selected",
              "type": "boolean",
              "default": false
            },
            {
              "kind": "field",
              "name": "current",
              "type": "boolean",
              "default": false
            },
            {
              "kind": "field",
              "name": "labels",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "baseURI": {
                    "type": "string"
                  },
                  "childNodes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ChildNode"
                    }
                  },
                  "firstChild": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ChildNode"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "isConnected": {
                    "type": "boolean"
                  },
                  "lastChild": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ChildNode"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "nextSibling": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ChildNode"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "nodeName": {
                    "type": "string"
                  },
                  "nodeType": {
                    "type": "number"
                  },
                  "nodeValue": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ownerDocument": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Document"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "parentElement": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/HTMLElement"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "parentNode": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ParentNode"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "previousSibling": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ChildNode"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "textContent": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ATTRIBUTE_NODE": {
                    "type": "number"
                  },
                  "CDATA_SECTION_NODE": {
                    "type": "number"
                  },
                  "COMMENT_NODE": {
                    "type": "number"
                  },
                  "DOCUMENT_FRAGMENT_NODE": {
                    "type": "number"
                  },
                  "DOCUMENT_NODE": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_CONTAINED_BY": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_CONTAINS": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_DISCONNECTED": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_FOLLOWING": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_PRECEDING": {
                    "type": "number"
                  },
                  "DOCUMENT_TYPE_NODE": {
                    "type": "number"
                  },
                  "ELEMENT_NODE": {
                    "type": "number"
                  },
                  "ENTITY_NODE": {
                    "type": "number"
                  },
                  "ENTITY_REFERENCE_NODE": {
                    "type": "number"
                  },
                  "NOTATION_NODE": {
                    "type": "number"
                  },
                  "PROCESSING_INSTRUCTION_NODE": {
                    "type": "number"
                  },
                  "TEXT_NODE": {
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleSelectedChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "getTextLabel",
              "description": "Returns a plain text label based on the option's content."
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": "string",
              "default": "",
              "description": "The option's value. When selected, the containing form control will receive this value. The value must be unique\nfrom other options in the same group. Values may not contain spaces, as spaces are used as delimiters when listing\nmultiple values.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Draws the option in a disabled state, preventing selection.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-option",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdOption",
            "module": "src/components/select/select-option.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-option",
          "declaration": {
            "name": "SdOption",
            "module": "src/components/select/select-option.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdSelect",
          "members": [
            {
              "kind": "field",
              "name": "typeToSelectString",
              "type": "string",
              "privacy": "protected",
              "default": ""
            },
            {
              "kind": "field",
              "name": "typeToSelectTimeout",
              "type": "number",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "closeWatcher",
              "type": {
                "text": "CloseWatcher | null | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "popup",
              "type": "object",
              "properties": {
                "anchorEl": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "cleanup": {},
                "popup": {
                  "description": "A reference to the internal popup container. Useful for animating and styling the popup with JavaScript.",
                  "$ref": "#/definitions/HTMLElement"
                },
                "arrowEl": {
                  "$ref": "#/definitions/HTMLElement"
                },
                "anchor": {
                  "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can provide the anchor\nelement `id`, a DOM element reference, or a `VirtualElement`. If the anchor lives inside the popup, use the\n`anchor` slot instead.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "string"
                    }
                  ]
                },
                "active": {
                  "description": "Activates the positioning logic and shows the popup. When this attribute is removed, the positioning logic is torn\ndown and the popup will be hidden.",
                  "type": "boolean",
                  "default": false
                },
                "placement": {
                  "description": "The preferred placement of the popup. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",
                  "enum": [
                    "bottom",
                    "bottom-end",
                    "bottom-start",
                    "left",
                    "left-end",
                    "left-start",
                    "right",
                    "right-end",
                    "right-start",
                    "top",
                    "top-end",
                    "top-start"
                  ],
                  "type": "string",
                  "default": "top"
                },
                "strategy": {
                  "description": "Determines how the popup is positioned. The `absolute` strategy works well in most cases, but if overflow is\nclipped, using a `fixed` position strategy can often workaround it.",
                  "enum": [
                    "absolute",
                    "fixed"
                  ],
                  "type": "string",
                  "default": "absolute"
                },
                "distance": {
                  "description": "The distance in pixels from which to offset the panel away from its anchor.",
                  "type": "number",
                  "default": 0
                },
                "skidding": {
                  "description": "The distance in pixels from which to offset the panel along its anchor.",
                  "type": "number",
                  "default": 0
                },
                "arrow": {
                  "description": "Attaches an arrow to the popup. The arrow's size and color can be customized using the `--arrow-size` and\n`--arrow-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",
                  "type": "boolean",
                  "default": false
                },
                "arrowPlacement": {
                  "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",
                  "enum": [
                    "anchor",
                    "center",
                    "end",
                    "start"
                  ],
                  "type": "string",
                  "default": "anchor"
                },
                "arrowPadding": {
                  "description": "The amount of padding between the arrow and the edges of the popup. If the popup has a border-radius, for example,\nthis will prevent it from overflowing the corners.",
                  "type": "number",
                  "default": 10
                },
                "flip": {
                  "description": "When set, placement of the popup will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",
                  "type": "boolean",
                  "default": false
                },
                "flipFallbackPlacements": {
                  "description": "If the preferred placement doesn't fit, popup will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead.",
                  "type": "string",
                  "default": ""
                },
                "flipFallbackStrategy": {
                  "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popup should be positioned using the best available fit based on available space or as it was initially\npreferred.",
                  "enum": [
                    "best-fit",
                    "initial"
                  ],
                  "type": "string",
                  "default": "best-fit"
                },
                "flipBoundary": {
                  "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Element"
                      }
                    }
                  ]
                },
                "flipPadding": {
                  "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur.",
                  "type": "number",
                  "default": 0
                },
                "shift": {
                  "description": "Moves the popup along the axis to keep it in view when clipped.",
                  "type": "boolean",
                  "default": false
                },
                "shiftBoundary": {
                  "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Element"
                      }
                    }
                  ]
                },
                "shiftPadding": {
                  "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur.",
                  "type": "number",
                  "default": 0
                },
                "autoSize": {
                  "description": "When set, this will cause the popup to automatically resize itself to prevent it from overflowing.",
                  "enum": [
                    "both",
                    "horizontal",
                    "vertical"
                  ],
                  "type": "string"
                },
                "sync": {
                  "description": "Syncs the popup's width or height to that of the anchor element.",
                  "enum": [
                    "both",
                    "height",
                    "width"
                  ],
                  "type": "string"
                },
                "autoSizeBoundary": {
                  "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Element"
                      }
                    }
                  ]
                },
                "autoSizePadding": {
                  "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",
                  "type": "number",
                  "default": 0
                },
                "hoverBridge": {
                  "description": "When a gap exists between the anchor and the popup element, this option will add a \"hover bridge\" that fills the\ngap using an invisible element. This makes listening for events such as `mouseenter` and `mouseleave` more sane\nbecause the pointer never technically leaves the element. The hover bridge will only be drawn when the popover is\nactive.",
                  "type": "boolean",
                  "default": false
                },
                "updateHoverBridge": {
                  "type": "object",
                  "additionalProperties": false
                },
                "dir": {
                  "type": "string",
                  "default": ""
                },
                "lang": {
                  "type": "string",
                  "default": ""
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "combobox",
              "type": {
                "text": "HTMLSlotElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "displayInput",
              "type": {
                "text": "HTMLInputElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "valueInput",
              "type": {
                "text": "HTMLInputElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "listbox",
              "type": {
                "text": "HTMLSlotElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "labelSlot",
              "type": "array"
            },
            {
              "kind": "field",
              "name": "helpTextSlot",
              "type": "array"
            },
            {
              "kind": "field",
              "name": "focused",
              "type": "boolean",
              "privacy": "protected",
              "default": false
            },
            {
              "kind": "field",
              "name": "displayLabel",
              "type": "string",
              "default": ""
            },
            {
              "kind": "field",
              "name": "currentOption",
              "type": "object",
              "properties": {
                "value": {
                  "description": "The option's value. When selected, the containing form control will receive this value. The value must be unique\nfrom other options in the same group. Values may not contain spaces, as spaces are used as delimiters when listing\nmultiple values.",
                  "type": "string",
                  "default": ""
                },
                "disabled": {
                  "description": "Draws the option in a disabled state, preventing selection.",
                  "type": "boolean",
                  "default": false
                },
                "cachedTextLabel": {
                  "type": "string",
                  "default": ""
                },
                "selected": {
                  "type": "boolean",
                  "default": false
                },
                "current": {
                  "type": "boolean",
                  "default": false
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Node"
                  }
                },
                "dir": {
                  "type": "string",
                  "default": ""
                },
                "lang": {
                  "type": "string",
                  "default": ""
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "type": "array",
              "default": [],
              "items": {
                "type": "object",
                "properties": {
                  "value": {
                    "description": "The option's value. When selected, the containing form control will receive this value. The value must be unique\nfrom other options in the same group. Values may not contain spaces, as spaces are used as delimiters when listing\nmultiple values.",
                    "type": "string",
                    "default": ""
                  },
                  "disabled": {
                    "description": "Draws the option in a disabled state, preventing selection.",
                    "type": "boolean",
                    "default": false
                  },
                  "cachedTextLabel": {
                    "type": "string",
                    "default": ""
                  },
                  "selected": {
                    "type": "boolean",
                    "default": false
                  },
                  "current": {
                    "type": "boolean",
                    "default": false
                  },
                  "labels": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Node"
                    }
                  },
                  "dir": {
                    "type": "string",
                    "default": ""
                  },
                  "lang": {
                    "type": "string",
                    "default": ""
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | string[]"
              },
              "default": "",
              "description": "The current value of the select, submitted as a name/value pair with form data. When `multiple` is enabled, the\nvalue attribute will be a space-delimited list of values based on the options selected, and the value property will\nbe an array. **For this reason, values must not contain spaces.**",
              "attribute": "value",
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string | string[]"
              },
              "default": "",
              "description": "The default value of the select component. used to reset the value.",
              "attribute": "defaultValue",
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": "string",
              "default": "",
              "description": "Placeholder text to show as a hint when the select is empty.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": "boolean",
              "default": false,
              "description": "Allows more than one option to be selected.",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxOptionsVisible",
              "type": "number",
              "default": 3,
              "description": "The maximum number of selected options to show when `multiple` is true. After the maximum, \"+n\" will be shown to\nindicate the number of additional items that are selected. Set to 0 to remove the limit.",
              "attribute": "max-options-visible"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the select control.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": "boolean",
              "default": false,
              "description": "Adds a clear button when the select is not empty.",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "open",
              "type": "boolean",
              "default": false,
              "description": "Indicates whether or not the select is open. You can toggle this attribute to show and hide the menu, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the select's open state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": "boolean",
              "default": false,
              "description": "Enable this option to prevent the listbox from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.",
              "attribute": "hoist"
            },
            {
              "kind": "field",
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The select's label. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": "string",
              "default": "bottom",
              "description": "The preferred placement of the select's menu. Note that the actual placement may vary as needed to keep the listbox\ninside of the viewport.",
              "attribute": "placement",
              "reflects": true,
              "enum": [
                "bottom",
                "top"
              ]
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": "string",
              "default": "",
              "description": "The select's help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "The select's required attribute.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "getTag",
              "type": "object",
              "description": "A function that customizes the tags to be rendered when multiple=true. The first argument is the option, the second\nis the current tag's index.  The function should return either a Lit TemplateResult or a string containing trusted HTML of the symbol to render at\nthe specified value.",
              "attribute": "getTag",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "getPopup",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "getDisplayInput",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "getValueInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getListbox",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true,
              "type": "object",
              "properties": {
                "badInput": {
                  "type": "boolean"
                },
                "customError": {
                  "type": "boolean"
                },
                "patternMismatch": {
                  "type": "boolean"
                },
                "rangeOverflow": {
                  "type": "boolean"
                },
                "rangeUnderflow": {
                  "type": "boolean"
                },
                "stepMismatch": {
                  "type": "boolean"
                },
                "tooLong": {
                  "type": "boolean"
                },
                "tooShort": {
                  "type": "boolean"
                },
                "typeMismatch": {
                  "type": "boolean"
                },
                "valid": {
                  "type": "boolean"
                },
                "valueMissing": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true,
              "type": "string"
            },
            {
              "kind": "method",
              "name": "addOpenListeners",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleDocumentFocusIn",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleDocumentKeyDown",
              "privacy": "protected",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleDocumentMouseDown",
              "privacy": "protected",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleLabelClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleComboboxMouseDown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleComboboxKeyDown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClearMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOptionClick",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleTagRemove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "SdRemoveEvent"
                  }
                },
                {
                  "name": "option",
                  "type": {
                    "text": "SdOption"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getAllOptions",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "getFirstOption",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "clearAllOptions",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setCurrentOption",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SdOption | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "reset",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setSelectedOptions",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SdOption | SdOption[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleOptionSelection",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SdOption"
                  }
                },
                {
                  "name": "force",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectionChanged",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "tags",
              "privacy": "protected",
              "readonly": true,
              "type": "array",
              "items": {}
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the listbox."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the listbox."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the control."
            },
            {
              "kind": "method",
              "name": "getValidityAnchor"
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderCombobox",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderInput",
              "privacy": "protected",
              "description": "render the display input. to impelement the search, use the autocomplete component"
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderHelpText",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderListbox",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string | string[]"
              },
              "default": "",
              "description": "The current value of the select, submitted as a name/value pair with form data. When `multiple` is enabled, the\nvalue attribute will be a space-delimited list of values based on the options selected, and the value property will\nbe an array. **For this reason, values must not contain spaces.**",
              "fieldName": "value",
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            {
              "name": "defaultValue",
              "type": {
                "text": "string | string[]"
              },
              "default": "",
              "description": "The default value of the select component. used to reset the value.",
              "fieldName": "defaultValue",
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            {
              "name": "placeholder",
              "type": "string",
              "default": "",
              "description": "Placeholder text to show as a hint when the select is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "multiple",
              "type": "boolean",
              "default": false,
              "description": "Allows more than one option to be selected.",
              "fieldName": "multiple"
            },
            {
              "name": "max-options-visible",
              "type": "number",
              "default": 3,
              "description": "The maximum number of selected options to show when `multiple` is true. After the maximum, \"+n\" will be shown to\nindicate the number of additional items that are selected. Set to 0 to remove the limit.",
              "fieldName": "maxOptionsVisible"
            },
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the select control.",
              "fieldName": "disabled"
            },
            {
              "name": "clearable",
              "type": "boolean",
              "default": false,
              "description": "Adds a clear button when the select is not empty.",
              "fieldName": "clearable"
            },
            {
              "name": "open",
              "type": "boolean",
              "default": false,
              "description": "Indicates whether or not the select is open. You can toggle this attribute to show and hide the menu, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the select's open state.",
              "fieldName": "open"
            },
            {
              "name": "hoist",
              "type": "boolean",
              "default": false,
              "description": "Enable this option to prevent the listbox from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.",
              "fieldName": "hoist"
            },
            {
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The select's label. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "placement",
              "type": "string",
              "default": "bottom",
              "description": "The preferred placement of the select's menu. Note that the actual placement may vary as needed to keep the listbox\ninside of the viewport.",
              "fieldName": "placement",
              "enum": [
                "bottom",
                "top"
              ]
            },
            {
              "name": "help-text",
              "type": "string",
              "default": "",
              "description": "The select's help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "The select's required attribute.",
              "fieldName": "required"
            },
            {
              "name": "getTag",
              "type": "object",
              "description": "A function that customizes the tags to be rendered when multiple=true. The first argument is the option, the second\nis the current tag's index.  The function should return either a Lit TemplateResult or a string containing trusted HTML of the symbol to render at\nthe specified value.",
              "fieldName": "getTag",
              "kind": "method",
              "additionalProperties": false
            }
          ],
          "superclass": {
            "name": "BaseSelectClass",
            "module": "src/components/select/select.ts"
          },
          "tagName": "sd-select",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdSelect",
            "module": "src/components/select/select.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-select",
          "declaration": {
            "name": "SdSelect",
            "module": "src/components/select/select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/sidebar/sidebar-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdSidebarItem",
          "members": [
            {
              "kind": "field",
              "name": "collapsed",
              "type": "boolean",
              "default": false,
              "description": "whether the sidebar is expanded or not",
              "attribute": "collapsed"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Draws the option in a disabled state, preventing selection.",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": "boolean",
              "default": false,
              "description": "the option is selected and has aria-selected=\"true\"",
              "attribute": "selected"
            },
            {
              "kind": "field",
              "name": "href",
              "type": "string",
              "default": "",
              "description": "the URL that the sidebar item points to",
              "attribute": "href"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleSelectedChange"
            }
          ],
          "attributes": [
            {
              "name": "collapsed",
              "type": "boolean",
              "default": false,
              "description": "whether the sidebar is expanded or not",
              "fieldName": "collapsed"
            },
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Draws the option in a disabled state, preventing selection.",
              "fieldName": "disabled"
            },
            {
              "name": "selected",
              "type": "boolean",
              "default": false,
              "description": "the option is selected and has aria-selected=\"true\"",
              "fieldName": "selected"
            },
            {
              "name": "href",
              "type": "string",
              "default": "",
              "description": "the URL that the sidebar item points to",
              "fieldName": "href"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-sidebar-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdSidebarItem",
            "module": "src/components/sidebar/sidebar-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-sidebar-item",
          "declaration": {
            "name": "SdSidebarItem",
            "module": "src/components/sidebar/sidebar-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/sidebar/sidebar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdSidebar",
          "members": [
            {
              "kind": "field",
              "name": "originalTrigger",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "anyOf": [
                {
                  "$ref": "#/definitions/HTMLElement"
                },
                {
                  "type": "null"
                }
              ]
            },
            {
              "kind": "method",
              "name": "modal",
              "privacy": "public",
              "default": "new Modal(this)"
            },
            {
              "kind": "field",
              "name": "closeWatcher",
              "type": {
                "text": "CloseWatcher | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "overlay",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "slotted",
              "type": "array"
            },
            {
              "kind": "field",
              "name": "visible",
              "type": "boolean",
              "default": false,
              "description": "Indicates whether or not the sidebar is visible. You can toggle this attribute to show and hide the sidebar, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the sidebar's visible state.",
              "attribute": "visible",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The sidebar's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": "string",
              "default": "start",
              "description": "Side from which the sidebar will appear.",
              "attribute": "placement",
              "reflects": true,
              "enum": [
                "bottom",
                "end",
                "start",
                "top"
              ]
            },
            {
              "kind": "field",
              "name": "contained",
              "type": "boolean",
              "default": false,
              "description": "By default, the sidebar slides out of its containing block (usually the viewport). To make the sidebar slide out of\nits parent element, set this attribute and add `position: relative` to the parent.",
              "attribute": "contained",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noBackdrop",
              "type": "boolean",
              "default": false,
              "description": "If true, the backdrop is not rendered.",
              "attribute": "no-backdrop",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "collapsed",
              "type": "boolean",
              "default": false,
              "description": "if the variant is push, collapse the sidebar to a minimized size",
              "attribute": "collapsed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "variant",
              "type": "string",
              "default": "overlay",
              "description": "The variant to use.\noverlay: render a sidebar\npush: render a fixed sidebar\nresponsive: render push on large devices and overlay on smaller devices",
              "attribute": "variant",
              "enum": [
                "overlay",
                "push",
                "responsive"
              ]
            },
            {
              "kind": "field",
              "name": "mainContent",
              "type": {
                "text": "Element | string | undefined"
              },
              "description": "the main content of the page, used with push variant for repositionning. if undefined, the next sibling element is chosen instead",
              "attribute": "mainContent",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "string"
                }
              ]
            },
            {
              "kind": "field",
              "name": "responsiveMode",
              "type": "string",
              "privacy": "private",
              "default": "none",
              "enum": [
                "none",
                "overlay",
                "push"
              ]
            },
            {
              "kind": "field",
              "name": "isOverlay",
              "type": "boolean",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "isPush",
              "type": "boolean",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleResponsiveChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "mediaQuery",
                  "type": {
                    "text": "MediaQueryListEvent | MediaQueryList"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "requestClose",
              "privacy": "private",
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "\"close-button\" | \"keyboard\" | \"overlay\""
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDocumentKeyDown",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "handleExpantionChange"
            },
            {
              "kind": "method",
              "name": "handleChildrenexpansion"
            },
            {
              "kind": "method",
              "name": "handleNoModalChange"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the sidebar."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the sidebar"
            },
            {
              "kind": "method",
              "name": "expand"
            },
            {
              "kind": "method",
              "name": "collapse"
            },
            {
              "kind": "method",
              "name": "toggleExpansion"
            },
            {
              "kind": "method",
              "name": "toggleDisplay"
            },
            {
              "kind": "method",
              "name": "renderOverlay",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "visible",
              "type": "boolean",
              "default": false,
              "description": "Indicates whether or not the sidebar is visible. You can toggle this attribute to show and hide the sidebar, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the sidebar's visible state.",
              "fieldName": "visible"
            },
            {
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The sidebar's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "placement",
              "type": "string",
              "default": "start",
              "description": "Side from which the sidebar will appear.",
              "fieldName": "placement",
              "enum": [
                "bottom",
                "end",
                "start",
                "top"
              ]
            },
            {
              "name": "contained",
              "type": "boolean",
              "default": false,
              "description": "By default, the sidebar slides out of its containing block (usually the viewport). To make the sidebar slide out of\nits parent element, set this attribute and add `position: relative` to the parent.",
              "fieldName": "contained"
            },
            {
              "name": "no-backdrop",
              "type": "boolean",
              "default": false,
              "description": "If true, the backdrop is not rendered.",
              "fieldName": "noBackdrop"
            },
            {
              "name": "collapsed",
              "type": "boolean",
              "default": false,
              "description": "if the variant is push, collapse the sidebar to a minimized size",
              "fieldName": "collapsed"
            },
            {
              "name": "variant",
              "type": "string",
              "default": "overlay",
              "description": "The variant to use.\noverlay: render a sidebar\npush: render a fixed sidebar\nresponsive: render push on large devices and overlay on smaller devices",
              "fieldName": "variant",
              "enum": [
                "overlay",
                "push",
                "responsive"
              ]
            },
            {
              "name": "mainContent",
              "type": {
                "text": "Element | string | undefined"
              },
              "description": "the main content of the page, used with push variant for repositionning. if undefined, the next sibling element is chosen instead",
              "fieldName": "mainContent",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "string"
                }
              ]
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-sidebar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdSidebar",
            "module": "src/components/sidebar/sidebar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-sidebar",
          "declaration": {
            "name": "SdSidebar",
            "module": "src/components/sidebar/sidebar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/spinner/spinner.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdSpinner",
          "members": [],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-spinner",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdSpinner",
            "module": "src/components/spinner/spinner.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-spinner",
          "declaration": {
            "name": "SdSpinner",
            "module": "src/components/spinner/spinner.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/switch/switch.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdSwitch",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": "string",
              "default": "on",
              "description": "The current value of the checkbox, submitted as a name/value pair with form data.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "title",
              "type": "string",
              "default": "",
              "attribute": "title",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The checkbox's size.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              },
              "enum": [
                "medium",
                "small"
              ]
            },
            {
              "kind": "field",
              "name": "checked",
              "type": "boolean",
              "default": false,
              "description": "Draws the checkbox in a checked state.",
              "attribute": "checked",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": "boolean",
              "default": false,
              "description": "Draws the checkbox in an indeterminate state. This is usually applied to checkboxes that represents a \"select\nall/none\" behavior when associated checkboxes have a mix of checked and unchecked states.",
              "attribute": "indeterminate",
              "reflects": true,
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "Makes the checkbox a required field.",
              "attribute": "required",
              "reflects": true,
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelText",
              "type": "string",
              "default": "",
              "description": "The checkbox's lable. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label-text",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": "string",
              "default": "",
              "description": "The checkbox's help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "getInput",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleStateChange",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the checkbox.",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the checkbox.",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the checkbox.",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "getFormValue",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "getFormState",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityAnchor",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "getState",
              "return": {
                "type": {
                  "text": "CheckboxState"
                }
              },
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            }
          ],
          "superclass": {
            "name": "SdCheckbox",
            "module": "/src/components/checkbox/checkbox"
          },
          "tagName": "sd-switch",
          "customElement": true,
          "attributes": [
            {
              "name": "value",
              "type": "string",
              "default": "on",
              "description": "The current value of the checkbox, submitted as a name/value pair with form data.",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "name": "title",
              "type": "string",
              "default": "",
              "fieldName": "title",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The checkbox's size.",
              "fieldName": "size",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              },
              "enum": [
                "medium",
                "small"
              ]
            },
            {
              "name": "checked",
              "type": "boolean",
              "default": false,
              "description": "Draws the checkbox in a checked state.",
              "fieldName": "checked",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "name": "indeterminate",
              "type": "boolean",
              "default": false,
              "description": "Draws the checkbox in an indeterminate state. This is usually applied to checkboxes that represents a \"select\nall/none\" behavior when associated checkboxes have a mix of checked and unchecked states.",
              "fieldName": "indeterminate",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "Makes the checkbox a required field.",
              "fieldName": "required",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "name": "label-text",
              "type": "string",
              "default": "",
              "description": "The checkbox's lable. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "labelText",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "name": "help-text",
              "type": "string",
              "default": "",
              "description": "The checkbox's help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText",
              "inheritedFrom": {
                "name": "SdCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdSwitch",
            "module": "src/components/switch/switch.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-switch",
          "declaration": {
            "name": "SdSwitch",
            "module": "src/components/switch/switch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab/tab-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdTabGroup",
          "members": [
            {
              "kind": "field",
              "name": "activeTab",
              "type": "object",
              "privacy": "private",
              "properties": {
                "attrId": {
                  "type": "number"
                },
                "componentId": {
                  "type": "string",
                  "default": "sd-tab-undefined"
                },
                "tab": {
                  "$ref": "#/definitions/HTMLElement"
                },
                "panel": {
                  "description": "The name of the tab panel this tab is associated with. The panel must be located in the same tab group.",
                  "type": "string",
                  "default": ""
                },
                "active": {
                  "description": "Draws the tab in an active state.",
                  "type": "boolean",
                  "default": false
                },
                "closable": {
                  "description": "Makes the tab closable and shows a close button.",
                  "type": "boolean",
                  "default": false
                },
                "disabled": {
                  "description": "Disables the tab and prevents selection.",
                  "type": "boolean",
                  "default": false
                },
                "tabIndex": {
                  "type": "number",
                  "default": 0
                },
                "dir": {
                  "type": "string",
                  "default": ""
                },
                "lang": {
                  "type": "string",
                  "default": ""
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "mutationObserver",
              "type": "object",
              "privacy": "private",
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": "object",
              "privacy": "private",
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "tabs",
              "type": "array",
              "privacy": "private",
              "default": [],
              "items": {
                "type": "object",
                "properties": {
                  "attrId": {
                    "type": "number"
                  },
                  "componentId": {
                    "type": "string",
                    "default": "sd-tab-undefined"
                  },
                  "tab": {
                    "$ref": "#/definitions/HTMLElement"
                  },
                  "panel": {
                    "description": "The name of the tab panel this tab is associated with. The panel must be located in the same tab group.",
                    "type": "string",
                    "default": ""
                  },
                  "active": {
                    "description": "Draws the tab in an active state.",
                    "type": "boolean",
                    "default": false
                  },
                  "closable": {
                    "description": "Makes the tab closable and shows a close button.",
                    "type": "boolean",
                    "default": false
                  },
                  "disabled": {
                    "description": "Disables the tab and prevents selection.",
                    "type": "boolean",
                    "default": false
                  },
                  "tabIndex": {
                    "type": "number",
                    "default": 0
                  },
                  "dir": {
                    "type": "string",
                    "default": ""
                  },
                  "lang": {
                    "type": "string",
                    "default": ""
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "kind": "field",
              "name": "focusableTabs",
              "type": "array",
              "privacy": "private",
              "default": [],
              "items": {
                "type": "object",
                "properties": {
                  "attrId": {
                    "type": "number"
                  },
                  "componentId": {
                    "type": "string",
                    "default": "sd-tab-undefined"
                  },
                  "tab": {
                    "$ref": "#/definitions/HTMLElement"
                  },
                  "panel": {
                    "description": "The name of the tab panel this tab is associated with. The panel must be located in the same tab group.",
                    "type": "string",
                    "default": ""
                  },
                  "active": {
                    "description": "Draws the tab in an active state.",
                    "type": "boolean",
                    "default": false
                  },
                  "closable": {
                    "description": "Makes the tab closable and shows a close button.",
                    "type": "boolean",
                    "default": false
                  },
                  "disabled": {
                    "description": "Disables the tab and prevents selection.",
                    "type": "boolean",
                    "default": false
                  },
                  "tabIndex": {
                    "type": "number",
                    "default": 0
                  },
                  "dir": {
                    "type": "string",
                    "default": ""
                  },
                  "lang": {
                    "type": "string",
                    "default": ""
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "kind": "field",
              "name": "panels",
              "type": "array",
              "privacy": "private",
              "default": [],
              "items": {
                "type": "object",
                "properties": {
                  "attrId": {
                    "type": "number"
                  },
                  "componentId": {
                    "type": "string",
                    "default": "sd-tab-panel-undefined"
                  },
                  "name": {
                    "description": "The tab panel's name.",
                    "type": "string",
                    "default": ""
                  },
                  "active": {
                    "description": "When true, the tab panel will be shown.",
                    "type": "boolean",
                    "default": false
                  },
                  "dir": {
                    "type": "string",
                    "default": ""
                  },
                  "lang": {
                    "type": "string",
                    "default": ""
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "kind": "field",
              "name": "tabGroup",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "nav",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "indicator",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "hasScrollControls",
              "type": "boolean",
              "privacy": "private",
              "default": false
            },
            {
              "kind": "field",
              "name": "placement",
              "type": "string",
              "default": "top",
              "description": "The placement of the tabs.",
              "attribute": "placement",
              "enum": [
                "bottom",
                "end",
                "start",
                "top"
              ]
            },
            {
              "kind": "field",
              "name": "activation",
              "type": "string",
              "default": "auto",
              "description": "When set to auto, navigating tabs with the arrow keys will instantly show the corresponding tab panel. When set to\nmanual, the tab will receive focus but will not show until the user presses spacebar or enter.",
              "attribute": "activation",
              "enum": [
                "auto",
                "manual"
              ]
            },
            {
              "kind": "field",
              "name": "noScrollControls",
              "type": "boolean",
              "default": false,
              "description": "Disables the scroll arrows that appear when tabs overflow.",
              "attribute": "no-scroll-controls"
            },
            {
              "kind": "method",
              "name": "getAllTabs",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getAllPanels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getActiveTab",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleScrollToStart",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleScrollToEnd",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setActiveTab",
              "privacy": "private",
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "SdTab"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "{ emitEvents?: boolean; scrollBehavior?: \"auto\" | \"smooth\" }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setAriaLabels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "repositionIndicator",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "syncTabsAndPanels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "findNextFocusableTab",
              "privacy": "private",
              "parameters": [
                {
                  "name": "currentIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "\"forward\" | \"backward\""
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateScrollControls"
            },
            {
              "kind": "method",
              "name": "syncIndicator"
            },
            {
              "kind": "method",
              "name": "show",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Shows the specified tab panel."
            }
          ],
          "attributes": [
            {
              "name": "placement",
              "type": "string",
              "default": "top",
              "description": "The placement of the tabs.",
              "fieldName": "placement",
              "enum": [
                "bottom",
                "end",
                "start",
                "top"
              ]
            },
            {
              "name": "activation",
              "type": "string",
              "default": "auto",
              "description": "When set to auto, navigating tabs with the arrow keys will instantly show the corresponding tab panel. When set to\nmanual, the tab will receive focus but will not show until the user presses spacebar or enter.",
              "fieldName": "activation",
              "enum": [
                "auto",
                "manual"
              ]
            },
            {
              "name": "no-scroll-controls",
              "type": "boolean",
              "default": false,
              "description": "Disables the scroll arrows that appear when tabs overflow.",
              "fieldName": "noScrollControls"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-tab-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdTabGroup",
            "module": "src/components/tab/tab-group.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-tab-group",
          "declaration": {
            "name": "SdTabGroup",
            "module": "src/components/tab/tab-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab/tab-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdTabPanel",
          "members": [
            {
              "kind": "method",
              "name": "attrId",
              "type": "number",
              "privacy": "private",
              "readonly": true,
              "default": "++id"
            },
            {
              "kind": "field",
              "name": "componentId",
              "privacy": "private",
              "readonly": true,
              "default": "sd-tab-panel-undefined",
              "type": "string"
            },
            {
              "kind": "field",
              "name": "name",
              "type": "string",
              "default": "",
              "description": "The tab panel's name.",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": "boolean",
              "default": false,
              "description": "When true, the tab panel will be shown.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleActiveChange"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": "string",
              "default": "",
              "description": "The tab panel's name.",
              "fieldName": "name"
            },
            {
              "name": "active",
              "type": "boolean",
              "default": false,
              "description": "When true, the tab panel will be shown.",
              "fieldName": "active"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-tab-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdTabPanel",
            "module": "src/components/tab/tab-panel.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-tab-panel",
          "declaration": {
            "name": "SdTabPanel",
            "module": "src/components/tab/tab-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab/tab.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdTab",
          "members": [
            {
              "kind": "method",
              "name": "attrId",
              "type": "number",
              "privacy": "private",
              "readonly": true,
              "default": "++id"
            },
            {
              "kind": "field",
              "name": "componentId",
              "privacy": "private",
              "readonly": true,
              "default": "sd-tab-undefined",
              "type": "string"
            },
            {
              "kind": "field",
              "name": "tab",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "panel",
              "type": "string",
              "default": "",
              "description": "The name of the tab panel this tab is associated with. The panel must be located in the same tab group.",
              "attribute": "panel",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": "boolean",
              "default": false,
              "description": "Draws the tab in an active state.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closable",
              "type": "boolean",
              "default": false,
              "description": "Makes the tab closable and shows a close button.",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the tab and prevents selection.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleCloseClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleActiveChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            }
          ],
          "attributes": [
            {
              "name": "panel",
              "type": "string",
              "default": "",
              "description": "The name of the tab panel this tab is associated with. The panel must be located in the same tab group.",
              "fieldName": "panel"
            },
            {
              "name": "active",
              "type": "boolean",
              "default": false,
              "description": "Draws the tab in an active state.",
              "fieldName": "active"
            },
            {
              "name": "closable",
              "type": "boolean",
              "default": false,
              "description": "Makes the tab closable and shows a close button.",
              "fieldName": "closable"
            },
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the tab and prevents selection.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-tab",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdTab",
            "module": "src/components/tab/tab.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-tab",
          "declaration": {
            "name": "SdTab",
            "module": "src/components/tab/tab.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tag/tag.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdTag",
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": "string",
              "default": "neutral",
              "description": "The tag's theme variant.",
              "attribute": "variant",
              "reflects": true,
              "enum": [
                "critical",
                "neutral",
                "primary",
                "success",
                "text",
                "warning"
              ]
            },
            {
              "kind": "field",
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The tag's size.",
              "attribute": "size",
              "reflects": true,
              "enum": [
                "large",
                "medium",
                "small"
              ]
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": "boolean",
              "default": false,
              "description": "Makes the tag clearavble and shows a remove button.",
              "attribute": "clearable"
            },
            {
              "kind": "method",
              "name": "handleRemoveClick",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": "string",
              "default": "neutral",
              "description": "The tag's theme variant.",
              "fieldName": "variant",
              "enum": [
                "critical",
                "neutral",
                "primary",
                "success",
                "text",
                "warning"
              ]
            },
            {
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The tag's size.",
              "fieldName": "size",
              "enum": [
                "large",
                "medium",
                "small"
              ]
            },
            {
              "name": "clearable",
              "type": "boolean",
              "default": false,
              "description": "Makes the tag clearavble and shows a remove button.",
              "fieldName": "clearable"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-tag",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdTag",
            "module": "src/components/tag/tag.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-tag",
          "declaration": {
            "name": "SdTag",
            "module": "src/components/tag/tag.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/textarea/textarea.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdTextarea",
          "members": [
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": "object",
              "privacy": "private",
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLTextAreaElement"
              }
            },
            {
              "kind": "field",
              "name": "sizeAdjuster",
              "type": {
                "text": "HTMLTextAreaElement"
              }
            },
            {
              "kind": "field",
              "name": "labelSlotEl",
              "type": "array"
            },
            {
              "kind": "field",
              "name": "helpTextSlotEl",
              "type": "array"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": "boolean",
              "privacy": "private",
              "default": false
            },
            {
              "kind": "field",
              "name": "title",
              "type": "string",
              "default": "",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "value",
              "type": "string",
              "default": "",
              "description": "The current value of the textarea, submitted as a name/value pair with form data.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": "string",
              "default": "",
              "description": "the initial value of the textarea component. used to reset the value",
              "attribute": "defaultValue"
            },
            {
              "kind": "field",
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The textarea's size.",
              "attribute": "size",
              "reflects": true,
              "enum": [
                "large",
                "medium",
                "small"
              ]
            },
            {
              "kind": "field",
              "name": "filled",
              "type": "boolean",
              "default": false,
              "description": "Draws a filled textarea.",
              "attribute": "filled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The textarea's label. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": "string",
              "default": "",
              "description": "The textarea's help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": "string",
              "default": "",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "rows",
              "type": "number",
              "default": 4,
              "description": "The number of rows to display by default.",
              "attribute": "rows"
            },
            {
              "kind": "field",
              "name": "resize",
              "type": "string",
              "default": "vertical",
              "description": "Controls how the textarea can be resized.",
              "attribute": "resize",
              "enum": [
                "auto",
                "none",
                "vertical"
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the textarea.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": "boolean",
              "default": false,
              "description": "Makes the textarea readonly.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "Makes the textarea a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": "number",
              "description": "The minimum length of input that will be considered valid.",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": "number",
              "description": "The maximum length of input that will be considered valid.",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": "string",
              "default": "off",
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "attribute": "autocapitalize",
              "enum": [
                "characters",
                "none",
                "off",
                "on",
                "sentences",
                "words"
              ]
            },
            {
              "kind": "field",
              "name": "autocorrect",
              "type": "string",
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "attribute": "autocorrect"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": "string",
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": "boolean",
              "default": false,
              "description": "Indicates that the input should receive focus on page load.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "enterkeyhint",
              "type": "string",
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "attribute": "enterkeyhint",
              "enum": [
                "done",
                "enter",
                "go",
                "next",
                "previous",
                "search",
                "send"
              ]
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": "boolean",
              "default": true,
              "description": "Enables spell checking on the textarea.",
              "attribute": "spellcheck"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": "string",
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\nkeyboard on supportive devices.",
              "attribute": "inputmode",
              "enum": [
                "decimal",
                "email",
                "none",
                "numeric",
                "search",
                "tel",
                "text",
                "url"
              ]
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true,
              "type": "object",
              "properties": {
                "badInput": {
                  "type": "boolean"
                },
                "customError": {
                  "type": "boolean"
                },
                "patternMismatch": {
                  "type": "boolean"
                },
                "rangeOverflow": {
                  "type": "boolean"
                },
                "rangeUnderflow": {
                  "type": "boolean"
                },
                "stepMismatch": {
                  "type": "boolean"
                },
                "tooLong": {
                  "type": "boolean"
                },
                "tooShort": {
                  "type": "boolean"
                },
                "typeMismatch": {
                  "type": "boolean"
                },
                "valid": {
                  "type": "boolean"
                },
                "valueMissing": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true,
              "type": "string"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setTextareaHeight",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleRowsChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the textarea."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the textarea."
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the textarea."
            },
            {
              "kind": "method",
              "name": "scrollPosition",
              "return": {
                "type": {
                  "text": "{ top: number; left: number } | undefined"
                }
              },
              "parameters": [
                {
                  "name": "position",
                  "optional": true,
                  "type": {
                    "text": "{\r\n        top?: number;\r\n        left?: number;\r\n    }"
                  }
                }
              ],
              "description": "Gets or sets the textarea's scroll position."
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "selectionStart",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionEnd",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionDirection",
                  "default": "\"none\"",
                  "type": {
                    "text": "\"forward\" | \"backward\" | \"none\""
                  }
                }
              ],
              "description": "Sets the start and end positions of the text selection (0-based)."
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "\"preserve\"",
                  "type": {
                    "text": "\"select\" | \"start\" | \"end\" | \"preserve\""
                  }
                }
              ],
              "description": "Replaces a range of text with a new string."
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderHelpText",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": "string",
              "default": "",
              "fieldName": "title"
            },
            {
              "name": "value",
              "type": "string",
              "default": "",
              "description": "The current value of the textarea, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "defaultValue",
              "type": "string",
              "default": "",
              "description": "the initial value of the textarea component. used to reset the value",
              "fieldName": "defaultValue"
            },
            {
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The textarea's size.",
              "fieldName": "size",
              "enum": [
                "large",
                "medium",
                "small"
              ]
            },
            {
              "name": "filled",
              "type": "boolean",
              "default": false,
              "description": "Draws a filled textarea.",
              "fieldName": "filled"
            },
            {
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The textarea's label. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "help-text",
              "type": "string",
              "default": "",
              "description": "The textarea's help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "placeholder",
              "type": "string",
              "default": "",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "rows",
              "type": "number",
              "default": 4,
              "description": "The number of rows to display by default.",
              "fieldName": "rows"
            },
            {
              "name": "resize",
              "type": "string",
              "default": "vertical",
              "description": "Controls how the textarea can be resized.",
              "fieldName": "resize",
              "enum": [
                "auto",
                "none",
                "vertical"
              ]
            },
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the textarea.",
              "fieldName": "disabled"
            },
            {
              "name": "readonly",
              "type": "boolean",
              "default": false,
              "description": "Makes the textarea readonly.",
              "fieldName": "readonly"
            },
            {
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "Makes the textarea a required field.",
              "fieldName": "required"
            },
            {
              "name": "minlength",
              "type": "number",
              "description": "The minimum length of input that will be considered valid.",
              "fieldName": "minlength"
            },
            {
              "name": "maxlength",
              "type": "number",
              "description": "The maximum length of input that will be considered valid.",
              "fieldName": "maxlength"
            },
            {
              "name": "autocapitalize",
              "type": "string",
              "default": "off",
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "fieldName": "autocapitalize",
              "enum": [
                "characters",
                "none",
                "off",
                "on",
                "sentences",
                "words"
              ]
            },
            {
              "name": "autocorrect",
              "type": "string",
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "fieldName": "autocorrect"
            },
            {
              "name": "autocomplete",
              "type": "string",
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.",
              "fieldName": "autocomplete"
            },
            {
              "name": "autofocus",
              "type": "boolean",
              "default": false,
              "description": "Indicates that the input should receive focus on page load.",
              "fieldName": "autofocus"
            },
            {
              "name": "enterkeyhint",
              "type": "string",
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "fieldName": "enterkeyhint",
              "enum": [
                "done",
                "enter",
                "go",
                "next",
                "previous",
                "search",
                "send"
              ]
            },
            {
              "name": "spellcheck",
              "type": "boolean",
              "default": true,
              "description": "Enables spell checking on the textarea.",
              "fieldName": "spellcheck"
            },
            {
              "name": "inputmode",
              "type": "string",
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\nkeyboard on supportive devices.",
              "fieldName": "inputmode",
              "enum": [
                "decimal",
                "email",
                "none",
                "numeric",
                "search",
                "tel",
                "text",
                "url"
              ]
            }
          ],
          "superclass": {
            "name": "BaseTextareaClass",
            "module": "src/components/textarea/textarea.ts"
          },
          "tagName": "sd-textarea",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdTextarea",
            "module": "src/components/textarea/textarea.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-textarea",
          "declaration": {
            "name": "SdTextarea",
            "module": "src/components/textarea/textarea.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/topBar/top-bar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdTopBar",
          "members": [
            {
              "kind": "field",
              "name": "expanded",
              "type": "boolean",
              "privacy": "private",
              "default": false
            },
            {
              "kind": "method",
              "name": "_sidebarControl",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sd-top-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdTopBar",
            "module": "src/components/topBar/top-bar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-top-bar",
          "declaration": {
            "name": "SdTopBar",
            "module": "src/components/topBar/top-bar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/internal/card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Card",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Card",
          "declaration": {
            "name": "Card",
            "module": "src/components/card/internal/card.ts"
          }
        }
      ]
    }
  ]
}

{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/components/button/button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdButton",
          "members": [
            {
              "kind": "method",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, {\r\n        assumeInteractionOn: [\"click\"],\r\n    })",
              "description": "A reactive controller to allow form controls to participate in form submission, validation, etc.",
              "type": "object",
              "properties": {
                "host": {},
                "form": {
                  "anyOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "patternProperties": {
                        "^[0-9]+$": {
                          "$ref": "#/definitions/Element"
                        }
                      }
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "options": {
                  "$ref": "#/definitions/FormControlControllerOptions"
                },
                "handleFormData": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handleFormSubmit": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handleFormReset": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handleInteraction": {
                  "type": "object",
                  "additionalProperties": false
                },
                "checkFormValidity": {
                  "type": "object",
                  "additionalProperties": false
                },
                "reportFormValidity": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "variant",
              "type": "string",
              "default": "filled",
              "description": "choose the style of the button.",
              "attribute": "variant",
              "enum": [
                "filled",
                "outlined",
                "plain"
              ]
            },
            {
              "kind": "field",
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The buttonâ€™s size.",
              "attribute": "size",
              "enum": [
                "large",
                "medium",
                "small"
              ]
            },
            {
              "kind": "field",
              "name": "iconOnly",
              "type": "boolean",
              "default": false,
              "description": "render the button as an icon button",
              "attribute": "iconOnly"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": "string",
              "default": "button",
              "attribute": "type",
              "enum": [
                "button",
                "reset",
                "submit"
              ]
            },
            {
              "kind": "field",
              "name": "name",
              "type": "string",
              "default": "",
              "description": "The name of the button, submitted as a name/value pair with form data, but only when this button is the submitter.\nThis attribute is ignored when `href` is present.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "href",
              "type": "string",
              "default": "",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "target",
              "type": "string",
              "default": "",
              "description": "Tells the browser where to open the link. Only used when `href` is present.",
              "attribute": "target",
              "enum": [
                "",
                "_blank",
                "_parent",
                "_self",
                "_top"
              ]
            },
            {
              "kind": "field",
              "name": "rel",
              "type": "string",
              "default": "noreferrer noopener",
              "description": "When using `href`, this attribute will map to the underlying link's `rel` attribute. Unlike regular links, the\ndefault is `noreferrer noopener` to prevent security exploits. However, if you're using `target` to point to a\nspecific tab/window, this will prevent that from working correctly. You can remove or change the default value by\nsetting the attribute to an empty string or a value of your choice, respectively.",
              "attribute": "rel"
            },
            {
              "kind": "field",
              "name": "download",
              "type": "string",
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is present.",
              "attribute": "download"
            },
            {
              "kind": "field",
              "name": "form",
              "type": "string",
              "description": "The \"form owner\" to associate the button with. If omitted, the closest containing form will be used instead. The\nvalue of this attribute must be an id of a form in the same document or shadow root as the button.",
              "attribute": "form"
            },
            {
              "kind": "field",
              "name": "formAction",
              "type": "string",
              "description": "Used to override the form owner's `action` attribute.",
              "attribute": "formaction"
            },
            {
              "kind": "field",
              "name": "formEnctype",
              "type": "string",
              "description": "Used to override the form owner's `enctype` attribute.",
              "attribute": "formenctype",
              "enum": [
                "application/x-www-form-urlencoded",
                "multipart/form-data",
                "text/plain"
              ]
            },
            {
              "kind": "field",
              "name": "formMethod",
              "type": "string",
              "description": "Used to override the form owner's `method` attribute.",
              "attribute": "formmethod",
              "enum": [
                "get",
                "post"
              ]
            },
            {
              "kind": "field",
              "name": "formNoValidate",
              "type": "boolean",
              "description": "Used to override the form owner's `novalidate` attribute.",
              "attribute": "formnovalidate"
            },
            {
              "kind": "field",
              "name": "formTarget",
              "type": "string",
              "description": "Used to override the form owner's `target` attribute.",
              "attribute": "formtarget"
            },
            {
              "kind": "field",
              "name": "trailingIcon",
              "type": "boolean",
              "default": false,
              "description": "Whether to render the icon at the inline end of the label rather than the\ninline start.\n_Note: Link buttons cannot have trailing icons.",
              "attribute": "trailing-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": "string",
              "default": "",
              "description": "The value of the button, submitted as a pair with the button's name as part of the form data, but only when this\nbutton is the submitter. This attribute is ignored when `href` is present.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | HTMLLinkElement | undefined"
              },
              "privacy": "private",
              "readonly": true,
              "anyOf": [
                {
                  "$ref": "#/definitions/HTMLButtonElement"
                },
                {
                  "$ref": "#/definitions/HTMLLinkElement"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getButton",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true,
              "type": "object",
              "properties": {
                "badInput": {
                  "type": "boolean"
                },
                "customError": {
                  "type": "boolean"
                },
                "patternMismatch": {
                  "type": "boolean"
                },
                "rangeOverflow": {
                  "type": "boolean"
                },
                "rangeUnderflow": {
                  "type": "boolean"
                },
                "stepMismatch": {
                  "type": "boolean"
                },
                "tooLong": {
                  "type": "boolean"
                },
                "tooShort": {
                  "type": "boolean"
                },
                "typeMismatch": {
                  "type": "boolean"
                },
                "valid": {
                  "type": "boolean"
                },
                "valueMissing": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true,
              "type": "string"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the button."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the button."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the button."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form, if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            },
            {
              "kind": "method",
              "name": "renderButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderLink",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": "string",
              "default": "filled",
              "description": "choose the style of the button.",
              "fieldName": "variant",
              "enum": [
                "filled",
                "outlined",
                "plain"
              ]
            },
            {
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The buttonâ€™s size.",
              "fieldName": "size",
              "enum": [
                "large",
                "medium",
                "small"
              ]
            },
            {
              "name": "iconOnly",
              "type": "boolean",
              "default": false,
              "description": "render the button as an icon button",
              "fieldName": "iconOnly"
            },
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "fieldName": "disabled"
            },
            {
              "name": "type",
              "type": "string",
              "default": "button",
              "fieldName": "type",
              "enum": [
                "button",
                "reset",
                "submit"
              ]
            },
            {
              "name": "name",
              "type": "string",
              "default": "",
              "description": "The name of the button, submitted as a name/value pair with form data, but only when this button is the submitter.\nThis attribute is ignored when `href` is present.",
              "fieldName": "name"
            },
            {
              "name": "href",
              "type": "string",
              "default": "",
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": "string",
              "default": "",
              "description": "Tells the browser where to open the link. Only used when `href` is present.",
              "fieldName": "target",
              "enum": [
                "",
                "_blank",
                "_parent",
                "_self",
                "_top"
              ]
            },
            {
              "name": "rel",
              "type": "string",
              "default": "noreferrer noopener",
              "description": "When using `href`, this attribute will map to the underlying link's `rel` attribute. Unlike regular links, the\ndefault is `noreferrer noopener` to prevent security exploits. However, if you're using `target` to point to a\nspecific tab/window, this will prevent that from working correctly. You can remove or change the default value by\nsetting the attribute to an empty string or a value of your choice, respectively.",
              "fieldName": "rel"
            },
            {
              "name": "download",
              "type": "string",
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is present.",
              "fieldName": "download"
            },
            {
              "name": "form",
              "type": "string",
              "description": "The \"form owner\" to associate the button with. If omitted, the closest containing form will be used instead. The\nvalue of this attribute must be an id of a form in the same document or shadow root as the button.",
              "fieldName": "form"
            },
            {
              "name": "formaction",
              "type": "string",
              "description": "Used to override the form owner's `action` attribute.",
              "fieldName": "formAction"
            },
            {
              "name": "formenctype",
              "type": "string",
              "description": "Used to override the form owner's `enctype` attribute.",
              "fieldName": "formEnctype",
              "enum": [
                "application/x-www-form-urlencoded",
                "multipart/form-data",
                "text/plain"
              ]
            },
            {
              "name": "formmethod",
              "type": "string",
              "description": "Used to override the form owner's `method` attribute.",
              "fieldName": "formMethod",
              "enum": [
                "get",
                "post"
              ]
            },
            {
              "name": "formnovalidate",
              "type": "boolean",
              "description": "Used to override the form owner's `novalidate` attribute.",
              "fieldName": "formNoValidate"
            },
            {
              "name": "formtarget",
              "type": "string",
              "description": "Used to override the form owner's `target` attribute.",
              "fieldName": "formTarget"
            },
            {
              "name": "trailing-icon",
              "type": "boolean",
              "default": false,
              "description": "Whether to render the icon at the inline end of the label rather than the\ninline start.\n_Note: Link buttons cannot have trailing icons.",
              "fieldName": "trailingIcon"
            },
            {
              "name": "value",
              "type": "string",
              "default": "",
              "description": "The value of the button, submitted as a pair with the button's name as part of the form data, but only when this\nbutton is the submitter. This attribute is ignored when `href` is present.",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdButton",
            "module": "src/components/button/button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-button",
          "declaration": {
            "name": "SdButton",
            "module": "src/components/button/button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/carousel/carousel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Carousel",
          "members": [
            {
              "kind": "field",
              "name": "autoTransition",
              "type": "boolean",
              "default": true,
              "attribute": "autoTransition"
            },
            {
              "kind": "field",
              "name": "count",
              "type": "number",
              "default": 0,
              "attribute": "count"
            },
            {
              "kind": "field",
              "name": "_slideIndex",
              "type": "number",
              "privacy": "private",
              "default": 0
            },
            {
              "kind": "method",
              "name": "_showSlideRadio",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_changeRadio",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_showSlide",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_prevSlide"
            },
            {
              "kind": "method",
              "name": "_nextSlide"
            },
            {
              "kind": "method",
              "name": "_autoShowSlides"
            }
          ],
          "attributes": [
            {
              "name": "autoTransition",
              "type": "boolean",
              "default": true,
              "fieldName": "autoTransition"
            },
            {
              "name": "count",
              "type": "number",
              "default": 0,
              "fieldName": "count"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sd-carousel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Carousel",
          "declaration": {
            "name": "Carousel",
            "module": "src/components/carousel/carousel.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-carousel",
          "declaration": {
            "name": "Carousel",
            "module": "src/components/carousel/carousel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/carousel/slider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Slider",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sd-slider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Slider",
          "declaration": {
            "name": "Slider",
            "module": "src/components/carousel/slider.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-slider",
          "declaration": {
            "name": "Slider",
            "module": "src/components/carousel/slider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdCheckbox",
          "members": [
            {
              "kind": "method",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, {\r\n        value: (control: SdCheckbox) =>\r\n            control.checked ? control.value || \"on\" : undefined,\r\n    })",
              "description": "A reactive controller to allow form controls to participate in form submission, validation, etc.",
              "type": "object",
              "properties": {
                "host": {},
                "form": {
                  "anyOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "patternProperties": {
                        "^[0-9]+$": {
                          "$ref": "#/definitions/Element"
                        }
                      }
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "options": {
                  "$ref": "#/definitions/FormControlControllerOptions"
                },
                "handleFormData": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handleFormSubmit": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handleFormReset": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handleInteraction": {
                  "type": "object",
                  "additionalProperties": false
                },
                "checkFormValidity": {
                  "type": "object",
                  "additionalProperties": false
                },
                "reportFormValidity": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "name",
              "type": "string",
              "default": "",
              "description": "The name of the checkbox, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": "object",
              "default": "",
              "description": "The current value of the checkbox, submitted as a name/value pair with form data.",
              "attribute": "value",
              "additionalProperties": false,
              "patternProperties": {
                "^[0-9]+$": {
                  "type": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The checkbox's size.",
              "attribute": "size",
              "reflects": true,
              "enum": [
                "medium",
                "small"
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the checkbox.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": "boolean",
              "default": false,
              "description": "Draws the checkbox in a checked state.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": "boolean",
              "default": false,
              "description": "Draws the checkbox in an indeterminate state. This is usually applied to checkboxes that represents a \"select\nall/none\" behavior when associated checkboxes have a mix of checked and unchecked states.",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": "string",
              "default": "",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "Makes the checkbox a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": "string",
              "default": "",
              "description": "The checkbox's help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": "boolean",
              "privacy": "private",
              "default": false
            },
            {
              "kind": "method",
              "name": "getInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true,
              "type": "object",
              "properties": {
                "badInput": {
                  "type": "boolean"
                },
                "customError": {
                  "type": "boolean"
                },
                "patternMismatch": {
                  "type": "boolean"
                },
                "rangeOverflow": {
                  "type": "boolean"
                },
                "rangeUnderflow": {
                  "type": "boolean"
                },
                "stepMismatch": {
                  "type": "boolean"
                },
                "tooLong": {
                  "type": "boolean"
                },
                "tooShort": {
                  "type": "boolean"
                },
                "typeMismatch": {
                  "type": "boolean"
                },
                "valid": {
                  "type": "boolean"
                },
                "valueMissing": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true,
              "type": "string"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleStateChange"
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the checkbox."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the checkbox."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the checkbox."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form, if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. The value provided will be shown to the user when the form is submitted. To clear\r\nthe custom validation message, call this method with an empty string."
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": "string",
              "default": "",
              "description": "The name of the checkbox, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": "object",
              "default": "",
              "description": "The current value of the checkbox, submitted as a name/value pair with form data.",
              "fieldName": "value",
              "additionalProperties": false,
              "patternProperties": {
                "^[0-9]+$": {
                  "type": "string"
                }
              }
            },
            {
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The checkbox's size.",
              "fieldName": "size",
              "enum": [
                "medium",
                "small"
              ]
            },
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the checkbox.",
              "fieldName": "disabled"
            },
            {
              "name": "checked",
              "type": "boolean",
              "default": false,
              "description": "Draws the checkbox in a checked state.",
              "fieldName": "checked"
            },
            {
              "name": "indeterminate",
              "type": "boolean",
              "default": false,
              "description": "Draws the checkbox in an indeterminate state. This is usually applied to checkboxes that represents a \"select\nall/none\" behavior when associated checkboxes have a mix of checked and unchecked states.",
              "fieldName": "indeterminate"
            },
            {
              "name": "form",
              "type": "string",
              "default": "",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "fieldName": "form"
            },
            {
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "Makes the checkbox a required field.",
              "fieldName": "required"
            },
            {
              "name": "help-text",
              "type": "string",
              "default": "",
              "description": "The checkbox's help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SdCheckbox",
          "declaration": {
            "name": "SdCheckbox",
            "module": "src/components/checkbox/checkbox.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-checkbox",
          "declaration": {
            "name": "SdCheckbox",
            "module": "src/components/checkbox/checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card-filled.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdCardFilled",
          "members": [],
          "superclass": {
            "name": "Card",
            "module": "/src/components/card/internal/card"
          },
          "tagName": "sd-card-filled",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SdCardFilled",
          "declaration": {
            "name": "SdCardFilled",
            "module": "src/components/card/card-filled.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-card-filled",
          "declaration": {
            "name": "SdCardFilled",
            "module": "src/components/card/card-filled.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card-outlined.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdCardOutlined",
          "members": [],
          "superclass": {
            "name": "Card",
            "module": "/src/components/card/internal/card"
          },
          "tagName": "sd-card-outlined",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SdCardOutlined",
          "declaration": {
            "name": "SdCardOutlined",
            "module": "src/components/card/card-outlined.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-card-outlined",
          "declaration": {
            "name": "SdCardOutlined",
            "module": "src/components/card/card-outlined.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/icon.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "sizes",
          "default": "new Map<String, Number>([\r\n    [\"s\", 20],\r\n    [\"m\", 24],\r\n    [\"l\", 40],\r\n    [\"xl\", 48],\r\n])"
        },
        {
          "kind": "class",
          "description": "",
          "name": "Icon",
          "members": [
            {
              "kind": "field",
              "name": "fill",
              "type": "boolean",
              "default": false,
              "attribute": "fill"
            },
            {
              "kind": "field",
              "name": "name",
              "type": "string",
              "default": "edit",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "size",
              "type": "string",
              "default": "m",
              "attribute": "size",
              "enum": [
                "l",
                "m",
                "s",
                "xl"
              ]
            },
            {
              "kind": "method",
              "name": "renderSVG",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "unknown"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "fill",
              "type": "boolean",
              "default": false,
              "fieldName": "fill"
            },
            {
              "name": "name",
              "type": "string",
              "default": "edit",
              "fieldName": "name"
            },
            {
              "name": "size",
              "type": "string",
              "default": "m",
              "fieldName": "size",
              "enum": [
                "l",
                "m",
                "s",
                "xl"
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sd-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sizes",
          "declaration": {
            "name": "sizes",
            "module": "src/components/icon/icon.ts"
          }
        },
        {
          "kind": "js",
          "name": "Icon",
          "declaration": {
            "name": "Icon",
            "module": "src/components/icon/icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-icon",
          "declaration": {
            "name": "Icon",
            "module": "src/components/icon/icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/link/link.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdLink",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": "string",
              "default": "m",
              "attribute": "size",
              "enum": [
                "l",
                "m",
                "s",
                "xl"
              ]
            },
            {
              "kind": "field",
              "name": "href",
              "type": "string",
              "default": "",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "download",
              "type": "string",
              "default": "",
              "attribute": "download"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": "string",
              "default": "m",
              "fieldName": "size",
              "enum": [
                "l",
                "m",
                "s",
                "xl"
              ]
            },
            {
              "name": "href",
              "type": "string",
              "default": "",
              "fieldName": "href"
            },
            {
              "name": "download",
              "type": "string",
              "default": "",
              "fieldName": "download"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sd-link",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SdLink",
          "declaration": {
            "name": "SdLink",
            "module": "src/components/link/link.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-link",
          "declaration": {
            "name": "SdLink",
            "module": "src/components/link/link.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/option/select-option.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdSelectOption",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": "string",
              "default": "",
              "description": "The option's value. When selected, the containing form control will receive this value. The value must be unique\nfrom other options in the same group. Values may not contain spaces, as spaces are used as delimiters when listing\nmultiple values.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Draws the option in a disabled state, preventing selection.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "cachedTextLabel",
              "type": "string",
              "privacy": "private",
              "default": ""
            },
            {
              "kind": "field",
              "name": "selected",
              "type": "boolean",
              "default": false
            },
            {
              "kind": "field",
              "name": "current",
              "type": "boolean",
              "default": false
            },
            {
              "kind": "field",
              "name": "labels",
              "type": "array"
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleSelectedChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "getTextLabel",
              "description": "Returns a plain text label based on the option's content."
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": "string",
              "default": "",
              "description": "The option's value. When selected, the containing form control will receive this value. The value must be unique\nfrom other options in the same group. Values may not contain spaces, as spaces are used as delimiters when listing\nmultiple values.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Draws the option in a disabled state, preventing selection.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-select-option",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdSelectOption",
            "module": "src/components/option/select-option.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-select-option",
          "declaration": {
            "name": "SdSelectOption",
            "module": "src/components/option/select-option.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/option/select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdSelect",
          "cssParts": [
            {
              "description": "The form control that wraps the label, input, and help text.",
              "name": "form-control"
            },
            {
              "description": "The label's wrapper.",
              "name": "form-control-label"
            },
            {
              "description": "The select's wrapper.",
              "name": "form-control-input"
            },
            {
              "description": "The help text's wrapper.",
              "name": "form-control-help-text"
            },
            {
              "description": "The container the wraps the prefix, combobox, clear icon, and expand button.",
              "name": "combobox"
            },
            {
              "description": "The container that wraps the prefix slot.",
              "name": "prefix"
            },
            {
              "description": "The element that displays the selected option's label, an `<input>` element.",
              "name": "display-input"
            },
            {
              "description": "The listbox container where options are slotted.",
              "name": "listbox"
            },
            {
              "description": "The container that houses option tags when `multiselect` is used.",
              "name": "tags"
            },
            {
              "description": "The individual tags that represent each multiselect option.",
              "name": "tag"
            },
            {
              "description": "The tag's base part.",
              "name": "tag__base"
            },
            {
              "description": "The tag's content part.",
              "name": "tag__content"
            },
            {
              "description": "The tag's remove button.",
              "name": "tag__remove-button"
            },
            {
              "description": "The tag's remove button base part.",
              "name": "tag__remove-button__base"
            },
            {
              "description": "The clear button.",
              "name": "clear-button"
            },
            {
              "description": "The container that wraps the expand icon.",
              "name": "expand-icon"
            }
          ],
          "slots": [
            {
              "description": "The listbox options. Must be `<sl-option>` elements. You can use `<sl-divider>` to group items visually.",
              "name": ""
            },
            {
              "description": "The input's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "Used to prepend a presentational icon or similar element to the combobox.",
              "name": "prefix"
            },
            {
              "description": "An icon to use in lieu of the default clear icon.",
              "name": "clear-icon"
            },
            {
              "description": "The icon to show when the control is expanded and collapsed. Rotates on open and close.",
              "name": "expand-icon"
            },
            {
              "description": "Text that describes how to use the input. Alternatively, you can use the `help-text` attribute.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, {\r\n        assumeInteractionOn: [\"sl-blur\", \"sl-input\"],\r\n    })",
              "description": "A reactive controller to allow form controls to participate in form submission, validation, etc.",
              "type": "object",
              "properties": {
                "host": {},
                "form": {
                  "anyOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "patternProperties": {
                        "^[0-9]+$": {
                          "$ref": "#/definitions/Element"
                        }
                      }
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "options": {
                  "$ref": "#/definitions/FormControlControllerOptions"
                },
                "handleFormData": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handleFormSubmit": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handleFormReset": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handleInteraction": {
                  "type": "object",
                  "additionalProperties": false
                },
                "checkFormValidity": {
                  "type": "object",
                  "additionalProperties": false
                },
                "reportFormValidity": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "typeToSelectString",
              "type": "string",
              "privacy": "private",
              "default": ""
            },
            {
              "kind": "field",
              "name": "typeToSelectTimeout",
              "type": "number",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "closeWatcher",
              "type": {
                "text": "CloseWatcher | null | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "popup",
              "type": "object",
              "properties": {
                "anchorEl": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "cleanup": {},
                "popup": {
                  "description": "A reference to the internal popup container. Useful for animating and styling the popup with JavaScript.",
                  "$ref": "#/definitions/HTMLElement"
                },
                "arrowEl": {
                  "$ref": "#/definitions/HTMLElement"
                },
                "anchor": {
                  "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can provide the anchor\nelement `id`, a DOM element reference, or a `VirtualElement`. If the anchor lives inside the popup, use the\n`anchor` slot instead.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "string"
                    }
                  ]
                },
                "active": {
                  "description": "Activates the positioning logic and shows the popup. When this attribute is removed, the positioning logic is torn\ndown and the popup will be hidden.",
                  "type": "boolean",
                  "default": false
                },
                "placement": {
                  "description": "The preferred placement of the popup. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",
                  "enum": [
                    "bottom",
                    "bottom-end",
                    "bottom-start",
                    "left",
                    "left-end",
                    "left-start",
                    "right",
                    "right-end",
                    "right-start",
                    "top",
                    "top-end",
                    "top-start"
                  ],
                  "type": "string",
                  "default": "top"
                },
                "strategy": {
                  "description": "Determines how the popup is positioned. The `absolute` strategy works well in most cases, but if overflow is\nclipped, using a `fixed` position strategy can often workaround it.",
                  "enum": [
                    "absolute",
                    "fixed"
                  ],
                  "type": "string",
                  "default": "absolute"
                },
                "distance": {
                  "description": "The distance in pixels from which to offset the panel away from its anchor.",
                  "type": "number",
                  "default": 0
                },
                "skidding": {
                  "description": "The distance in pixels from which to offset the panel along its anchor.",
                  "type": "number",
                  "default": 0
                },
                "arrow": {
                  "description": "Attaches an arrow to the popup. The arrow's size and color can be customized using the `--arrow-size` and\n`--arrow-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",
                  "type": "boolean",
                  "default": false
                },
                "arrowPlacement": {
                  "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",
                  "enum": [
                    "anchor",
                    "center",
                    "end",
                    "start"
                  ],
                  "type": "string",
                  "default": "anchor"
                },
                "arrowPadding": {
                  "description": "The amount of padding between the arrow and the edges of the popup. If the popup has a border-radius, for example,\nthis will prevent it from overflowing the corners.",
                  "type": "number",
                  "default": 10
                },
                "flip": {
                  "description": "When set, placement of the popup will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",
                  "type": "boolean",
                  "default": false
                },
                "flipFallbackPlacements": {
                  "description": "If the preferred placement doesn't fit, popup will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead.",
                  "type": "string",
                  "default": ""
                },
                "flipFallbackStrategy": {
                  "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popup should be positioned using the best available fit based on available space or as it was initially\npreferred.",
                  "enum": [
                    "best-fit",
                    "initial"
                  ],
                  "type": "string",
                  "default": "best-fit"
                },
                "flipBoundary": {
                  "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Element"
                      }
                    }
                  ]
                },
                "flipPadding": {
                  "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur.",
                  "type": "number",
                  "default": 0
                },
                "shift": {
                  "description": "Moves the popup along the axis to keep it in view when clipped.",
                  "type": "boolean",
                  "default": false
                },
                "shiftBoundary": {
                  "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Element"
                      }
                    }
                  ]
                },
                "shiftPadding": {
                  "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur.",
                  "type": "number",
                  "default": 0
                },
                "autoSize": {
                  "description": "When set, this will cause the popup to automatically resize itself to prevent it from overflowing.",
                  "enum": [
                    "both",
                    "horizontal",
                    "vertical"
                  ],
                  "type": "string"
                },
                "sync": {
                  "description": "Syncs the popup's width or height to that of the anchor element.",
                  "enum": [
                    "both",
                    "height",
                    "width"
                  ],
                  "type": "string"
                },
                "autoSizeBoundary": {
                  "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Element"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Element"
                      }
                    }
                  ]
                },
                "autoSizePadding": {
                  "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",
                  "type": "number",
                  "default": 0
                },
                "hoverBridge": {
                  "description": "When a gap exists between the anchor and the popup element, this option will add a \"hover bridge\" that fills the\ngap using an invisible element. This makes listening for events such as `mouseenter` and `mouseleave` more sane\nbecause the pointer never technically leaves the element. The hover bridge will only be drawn when the popover is\nactive.",
                  "type": "boolean",
                  "default": false
                },
                "updateHoverBridge": {
                  "type": "object",
                  "additionalProperties": false
                },
                "dir": {
                  "type": "string",
                  "default": ""
                },
                "lang": {
                  "type": "string",
                  "default": ""
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "combobox",
              "type": {
                "text": "HTMLSlotElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "displayInput",
              "type": {
                "text": "HTMLInputElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "valueInput",
              "type": {
                "text": "HTMLInputElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "listbox",
              "type": {
                "text": "HTMLSlotElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": "boolean",
              "privacy": "private",
              "default": false
            },
            {
              "kind": "field",
              "name": "displayLabel",
              "type": "string",
              "default": ""
            },
            {
              "kind": "field",
              "name": "currentOption",
              "type": "object",
              "properties": {
                "value": {
                  "description": "The option's value. When selected, the containing form control will receive this value. The value must be unique\nfrom other options in the same group. Values may not contain spaces, as spaces are used as delimiters when listing\nmultiple values.",
                  "type": "string",
                  "default": ""
                },
                "disabled": {
                  "description": "Draws the option in a disabled state, preventing selection.",
                  "type": "boolean",
                  "default": false
                },
                "cachedTextLabel": {
                  "type": "string",
                  "default": ""
                },
                "selected": {
                  "type": "boolean",
                  "default": false
                },
                "current": {
                  "type": "boolean",
                  "default": false
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/HTMLElement"
                  }
                },
                "dir": {
                  "type": "string",
                  "default": ""
                },
                "lang": {
                  "type": "string",
                  "default": ""
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "type": "array",
              "default": [],
              "items": {
                "type": "object",
                "properties": {
                  "value": {
                    "description": "The option's value. When selected, the containing form control will receive this value. The value must be unique\nfrom other options in the same group. Values may not contain spaces, as spaces are used as delimiters when listing\nmultiple values.",
                    "type": "string",
                    "default": ""
                  },
                  "disabled": {
                    "description": "Draws the option in a disabled state, preventing selection.",
                    "type": "boolean",
                    "default": false
                  },
                  "cachedTextLabel": {
                    "type": "string",
                    "default": ""
                  },
                  "selected": {
                    "type": "boolean",
                    "default": false
                  },
                  "current": {
                    "type": "boolean",
                    "default": false
                  },
                  "labels": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/HTMLElement"
                    }
                  },
                  "dir": {
                    "type": "string",
                    "default": ""
                  },
                  "lang": {
                    "type": "string",
                    "default": ""
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": "string",
              "default": "",
              "description": "The name of the select, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | string[]"
              },
              "default": "",
              "description": "The current value of the select, submitted as a name/value pair with form data. When `multiple` is enabled, the\nvalue attribute will be a space-delimited list of values based on the options selected, and the value property will\nbe an array. **For this reason, values must not contain spaces.**",
              "attribute": "value",
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            {
              "kind": "field",
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The select's size.",
              "attribute": "size",
              "reflects": true,
              "enum": [
                "large",
                "medium",
                "small"
              ]
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": "string",
              "default": "",
              "description": "Placeholder text to show as a hint when the select is empty.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": "boolean",
              "default": false,
              "description": "Allows more than one option to be selected.",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxOptionsVisible",
              "type": "number",
              "default": 3,
              "description": "The maximum number of selected options to show when `multiple` is true. After the maximum, \"+n\" will be shown to\nindicate the number of additional items that are selected. Set to 0 to remove the limit.",
              "attribute": "max-options-visible"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the select control.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": "boolean",
              "default": false,
              "description": "Adds a clear button when the select is not empty.",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "open",
              "type": "boolean",
              "default": false,
              "description": "Indicates whether or not the select is open. You can toggle this attribute to show and hide the menu, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the select's open state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": "boolean",
              "default": false,
              "description": "Enable this option to prevent the listbox from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.",
              "attribute": "hoist"
            },
            {
              "kind": "field",
              "name": "filled",
              "type": "boolean",
              "default": false,
              "description": "Draws a filled select.",
              "attribute": "filled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": "boolean",
              "default": false,
              "description": "Draws a pill-style select with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The select's label. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": "string",
              "default": "bottom",
              "description": "The preferred placement of the select's menu. Note that the actual placement may vary as needed to keep the listbox\ninside of the viewport.",
              "attribute": "placement",
              "reflects": true,
              "enum": [
                "bottom",
                "top"
              ]
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": "string",
              "default": "",
              "description": "The select's help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "form",
              "type": "string",
              "default": "",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "The select's required attribute.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "getTag",
              "type": "object",
              "description": "A function that customizes the tags to be rendered when multiple=true. The first argument is the option, the second\nis the current tag's index.  The function should return either a Lit TemplateResult or a string containing trusted HTML of the symbol to render at\nthe specified value.",
              "attribute": "getTag",
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true,
              "type": "object",
              "properties": {
                "badInput": {
                  "type": "boolean"
                },
                "customError": {
                  "type": "boolean"
                },
                "patternMismatch": {
                  "type": "boolean"
                },
                "rangeOverflow": {
                  "type": "boolean"
                },
                "rangeUnderflow": {
                  "type": "boolean"
                },
                "stepMismatch": {
                  "type": "boolean"
                },
                "tooLong": {
                  "type": "boolean"
                },
                "tooShort": {
                  "type": "boolean"
                },
                "typeMismatch": {
                  "type": "boolean"
                },
                "valid": {
                  "type": "boolean"
                },
                "valueMissing": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true,
              "type": "string"
            },
            {
              "kind": "method",
              "name": "addOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDocumentFocusIn",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleDocumentKeyDown",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleDocumentMouseDown",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "handleLabelClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleComboboxMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleComboboxKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClearMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOptionClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getAllOptions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getFirstOption",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setCurrentOption",
              "privacy": "private",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SdOption | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSelectedOptions",
              "privacy": "private",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SdOption | SdOption[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleOptionSelection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "SdOption"
                  }
                },
                {
                  "name": "force",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectionChanged",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "tags",
              "privacy": "protected",
              "readonly": true,
              "type": "array",
              "items": {}
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the listbox."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the listbox."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form, if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the control."
            }
          ],
          "events": [
            {
              "description": "Emitted when the control's value changes.",
              "name": "sl-change"
            },
            {
              "description": "Emitted when the control's value is cleared.",
              "name": "sl-clear"
            },
            {
              "description": "Emitted when the control receives input.",
              "name": "sl-input"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "sl-focus"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "sl-blur"
            },
            {
              "description": "Emitted when the select's menu opens.",
              "name": "sl-show"
            },
            {
              "description": "Emitted after the select's menu opens and all animations are complete.",
              "name": "sl-after-show"
            },
            {
              "description": "Emitted when the select's menu closes.",
              "name": "sl-hide"
            },
            {
              "description": "Emitted after the select's menu closes and all animations are complete.",
              "name": "sl-after-hide"
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "sl-invalid"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": "string",
              "default": "",
              "description": "The name of the select, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string | string[]"
              },
              "default": "",
              "description": "The current value of the select, submitted as a name/value pair with form data. When `multiple` is enabled, the\nvalue attribute will be a space-delimited list of values based on the options selected, and the value property will\nbe an array. **For this reason, values must not contain spaces.**",
              "fieldName": "value",
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            {
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The select's size.",
              "fieldName": "size",
              "enum": [
                "large",
                "medium",
                "small"
              ]
            },
            {
              "name": "placeholder",
              "type": "string",
              "default": "",
              "description": "Placeholder text to show as a hint when the select is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "multiple",
              "type": "boolean",
              "default": false,
              "description": "Allows more than one option to be selected.",
              "fieldName": "multiple"
            },
            {
              "name": "max-options-visible",
              "type": "number",
              "default": 3,
              "description": "The maximum number of selected options to show when `multiple` is true. After the maximum, \"+n\" will be shown to\nindicate the number of additional items that are selected. Set to 0 to remove the limit.",
              "fieldName": "maxOptionsVisible"
            },
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the select control.",
              "fieldName": "disabled"
            },
            {
              "name": "clearable",
              "type": "boolean",
              "default": false,
              "description": "Adds a clear button when the select is not empty.",
              "fieldName": "clearable"
            },
            {
              "name": "open",
              "type": "boolean",
              "default": false,
              "description": "Indicates whether or not the select is open. You can toggle this attribute to show and hide the menu, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the select's open state.",
              "fieldName": "open"
            },
            {
              "name": "hoist",
              "type": "boolean",
              "default": false,
              "description": "Enable this option to prevent the listbox from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all, scenarios.",
              "fieldName": "hoist"
            },
            {
              "name": "filled",
              "type": "boolean",
              "default": false,
              "description": "Draws a filled select.",
              "fieldName": "filled"
            },
            {
              "name": "pill",
              "type": "boolean",
              "default": false,
              "description": "Draws a pill-style select with rounded edges.",
              "fieldName": "pill"
            },
            {
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The select's label. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "placement",
              "type": "string",
              "default": "bottom",
              "description": "The preferred placement of the select's menu. Note that the actual placement may vary as needed to keep the listbox\ninside of the viewport.",
              "fieldName": "placement",
              "enum": [
                "bottom",
                "top"
              ]
            },
            {
              "name": "help-text",
              "type": "string",
              "default": "",
              "description": "The select's help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "form",
              "type": "string",
              "default": "",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "fieldName": "form"
            },
            {
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "The select's required attribute.",
              "fieldName": "required"
            },
            {
              "name": "getTag",
              "type": "object",
              "description": "A function that customizes the tags to be rendered when multiple=true. The first argument is the option, the second\nis the current tag's index.  The function should return either a Lit TemplateResult or a string containing trusted HTML of the symbol to render at\nthe specified value.",
              "fieldName": "getTag",
              "additionalProperties": false
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "summary": "Selects allow you to choose items from a menu of predefined options.",
          "tagName": "sd-select",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdSelect",
            "module": "src/components/option/select.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-select",
          "declaration": {
            "name": "SdSelect",
            "module": "src/components/option/select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/popup/popup.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdPopup",
          "members": [
            {
              "kind": "field",
              "name": "anchorEl",
              "type": {
                "text": "Element | null | undefined"
              },
              "privacy": "private",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "null"
                }
              ]
            },
            {
              "kind": "field",
              "name": "cleanup",
              "type": {
                "text": "ReturnType<typeof autoUpdate> | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "A reference to the internal popup container. Useful for animating and styling the popup with JavaScript."
            },
            {
              "kind": "field",
              "name": "arrowEl",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "Element | string | undefined"
              },
              "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can provide the anchor\nelement `id`, a DOM element reference, or a `VirtualElement`. If the anchor lives inside the popup, use the\n`anchor` slot instead.",
              "attribute": "anchor",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "string"
                }
              ]
            },
            {
              "kind": "field",
              "name": "active",
              "type": "boolean",
              "default": false,
              "description": "Activates the positioning logic and shows the popup. When this attribute is removed, the positioning logic is torn\ndown and the popup will be hidden.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": "string",
              "default": "top",
              "description": "The preferred placement of the popup. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",
              "attribute": "placement",
              "reflects": true,
              "enum": [
                "bottom",
                "bottom-end",
                "bottom-start",
                "left",
                "left-end",
                "left-start",
                "right",
                "right-end",
                "right-start",
                "top",
                "top-end",
                "top-start"
              ]
            },
            {
              "kind": "field",
              "name": "strategy",
              "type": "string",
              "default": "absolute",
              "description": "Determines how the popup is positioned. The `absolute` strategy works well in most cases, but if overflow is\nclipped, using a `fixed` position strategy can often workaround it.",
              "attribute": "strategy",
              "reflects": true,
              "enum": [
                "absolute",
                "fixed"
              ]
            },
            {
              "kind": "field",
              "name": "distance",
              "type": "number",
              "default": 0,
              "description": "The distance in pixels from which to offset the panel away from its anchor.",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": "number",
              "default": 0,
              "description": "The distance in pixels from which to offset the panel along its anchor.",
              "attribute": "skidding"
            },
            {
              "kind": "field",
              "name": "arrow",
              "type": "boolean",
              "default": false,
              "description": "Attaches an arrow to the popup. The arrow's size and color can be customized using the `--arrow-size` and\n`--arrow-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",
              "attribute": "arrow"
            },
            {
              "kind": "field",
              "name": "arrowPlacement",
              "type": "string",
              "default": "anchor",
              "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",
              "attribute": "arrow-placement",
              "enum": [
                "anchor",
                "center",
                "end",
                "start"
              ]
            },
            {
              "kind": "field",
              "name": "arrowPadding",
              "type": "number",
              "default": 10,
              "description": "The amount of padding between the arrow and the edges of the popup. If the popup has a border-radius, for example,\nthis will prevent it from overflowing the corners.",
              "attribute": "arrow-padding"
            },
            {
              "kind": "field",
              "name": "flip",
              "type": "boolean",
              "default": false,
              "description": "When set, placement of the popup will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",
              "attribute": "flip"
            },
            {
              "kind": "field",
              "name": "flipFallbackPlacements",
              "type": "string",
              "default": "",
              "description": "If the preferred placement doesn't fit, popup will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead.",
              "attribute": "flip-fallback-placements"
            },
            {
              "kind": "field",
              "name": "flipFallbackStrategy",
              "type": "string",
              "default": "best-fit",
              "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popup should be positioned using the best available fit based on available space or as it was initially\npreferred.",
              "attribute": "flip-fallback-strategy",
              "enum": [
                "best-fit",
                "initial"
              ]
            },
            {
              "kind": "field",
              "name": "flipBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "attribute": "flipBoundary",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Element"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "flipPadding",
              "type": "number",
              "default": 0,
              "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur.",
              "attribute": "flip-padding"
            },
            {
              "kind": "field",
              "name": "shift",
              "type": "boolean",
              "default": false,
              "description": "Moves the popup along the axis to keep it in view when clipped.",
              "attribute": "shift"
            },
            {
              "kind": "field",
              "name": "shiftBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "attribute": "shiftBoundary",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Element"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "shiftPadding",
              "type": "number",
              "default": 0,
              "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur.",
              "attribute": "shift-padding"
            },
            {
              "kind": "field",
              "name": "autoSize",
              "type": "string",
              "description": "When set, this will cause the popup to automatically resize itself to prevent it from overflowing.",
              "attribute": "auto-size",
              "enum": [
                "both",
                "horizontal",
                "vertical"
              ]
            },
            {
              "kind": "field",
              "name": "sync",
              "type": "string",
              "description": "Syncs the popup's width or height to that of the anchor element.",
              "attribute": "sync",
              "enum": [
                "both",
                "height",
                "width"
              ]
            },
            {
              "kind": "field",
              "name": "autoSizeBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "attribute": "autoSizeBoundary",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Element"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "autoSizePadding",
              "type": "number",
              "default": 0,
              "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",
              "attribute": "auto-size-padding"
            },
            {
              "kind": "field",
              "name": "hoverBridge",
              "type": "boolean",
              "default": false,
              "description": "When a gap exists between the anchor and the popup element, this option will add a \"hover bridge\" that fills the\ngap using an invisible element. This makes listening for events such as `mouseenter` and `mouseleave` more sane\nbecause the pointer never technically leaves the element. The hover bridge will only be drawn when the popover is\nactive.",
              "attribute": "hover-bridge"
            },
            {
              "kind": "method",
              "name": "getPopup",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getArrowElement",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleAnchorChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "start",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "stop",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Forces the popup to recalculate and reposition itself."
            },
            {
              "kind": "field",
              "name": "updateHoverBridge",
              "privacy": "private",
              "type": "object",
              "additionalProperties": false
            }
          ],
          "attributes": [
            {
              "name": "anchor",
              "type": {
                "text": "Element | string | undefined"
              },
              "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can provide the anchor\nelement `id`, a DOM element reference, or a `VirtualElement`. If the anchor lives inside the popup, use the\n`anchor` slot instead.",
              "fieldName": "anchor",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "string"
                }
              ]
            },
            {
              "name": "active",
              "type": "boolean",
              "default": false,
              "description": "Activates the positioning logic and shows the popup. When this attribute is removed, the positioning logic is torn\ndown and the popup will be hidden.",
              "fieldName": "active"
            },
            {
              "name": "placement",
              "type": "string",
              "default": "top",
              "description": "The preferred placement of the popup. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",
              "fieldName": "placement",
              "enum": [
                "bottom",
                "bottom-end",
                "bottom-start",
                "left",
                "left-end",
                "left-start",
                "right",
                "right-end",
                "right-start",
                "top",
                "top-end",
                "top-start"
              ]
            },
            {
              "name": "strategy",
              "type": "string",
              "default": "absolute",
              "description": "Determines how the popup is positioned. The `absolute` strategy works well in most cases, but if overflow is\nclipped, using a `fixed` position strategy can often workaround it.",
              "fieldName": "strategy",
              "enum": [
                "absolute",
                "fixed"
              ]
            },
            {
              "name": "distance",
              "type": "number",
              "default": 0,
              "description": "The distance in pixels from which to offset the panel away from its anchor.",
              "fieldName": "distance"
            },
            {
              "name": "skidding",
              "type": "number",
              "default": 0,
              "description": "The distance in pixels from which to offset the panel along its anchor.",
              "fieldName": "skidding"
            },
            {
              "name": "arrow",
              "type": "boolean",
              "default": false,
              "description": "Attaches an arrow to the popup. The arrow's size and color can be customized using the `--arrow-size` and\n`--arrow-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",
              "fieldName": "arrow"
            },
            {
              "name": "arrow-placement",
              "type": "string",
              "default": "anchor",
              "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",
              "fieldName": "arrowPlacement",
              "enum": [
                "anchor",
                "center",
                "end",
                "start"
              ]
            },
            {
              "name": "arrow-padding",
              "type": "number",
              "default": 10,
              "description": "The amount of padding between the arrow and the edges of the popup. If the popup has a border-radius, for example,\nthis will prevent it from overflowing the corners.",
              "fieldName": "arrowPadding"
            },
            {
              "name": "flip",
              "type": "boolean",
              "default": false,
              "description": "When set, placement of the popup will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",
              "fieldName": "flip"
            },
            {
              "name": "flip-fallback-placements",
              "type": "string",
              "default": "",
              "description": "If the preferred placement doesn't fit, popup will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead.",
              "fieldName": "flipFallbackPlacements"
            },
            {
              "name": "flip-fallback-strategy",
              "type": "string",
              "default": "best-fit",
              "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popup should be positioned using the best available fit based on available space or as it was initially\npreferred.",
              "fieldName": "flipFallbackStrategy",
              "enum": [
                "best-fit",
                "initial"
              ]
            },
            {
              "name": "flipBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "fieldName": "flipBoundary",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Element"
                  }
                }
              ]
            },
            {
              "name": "flip-padding",
              "type": "number",
              "default": 0,
              "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur.",
              "fieldName": "flipPadding"
            },
            {
              "name": "shift",
              "type": "boolean",
              "default": false,
              "description": "Moves the popup along the axis to keep it in view when clipped.",
              "fieldName": "shift"
            },
            {
              "name": "shiftBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "fieldName": "shiftBoundary",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Element"
                  }
                }
              ]
            },
            {
              "name": "shift-padding",
              "type": "number",
              "default": 0,
              "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur.",
              "fieldName": "shiftPadding"
            },
            {
              "name": "auto-size",
              "type": "string",
              "description": "When set, this will cause the popup to automatically resize itself to prevent it from overflowing.",
              "fieldName": "autoSize",
              "enum": [
                "both",
                "horizontal",
                "vertical"
              ]
            },
            {
              "name": "sync",
              "type": "string",
              "description": "Syncs the popup's width or height to that of the anchor element.",
              "fieldName": "sync",
              "enum": [
                "both",
                "height",
                "width"
              ]
            },
            {
              "name": "autoSizeBoundary",
              "type": {
                "text": "Element | Element[] | undefined"
              },
              "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "fieldName": "autoSizeBoundary",
              "anyOf": [
                {
                  "$ref": "#/definitions/Element"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Element"
                  }
                }
              ]
            },
            {
              "name": "auto-size-padding",
              "type": "number",
              "default": 0,
              "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",
              "fieldName": "autoSizePadding"
            },
            {
              "name": "hover-bridge",
              "type": "boolean",
              "default": false,
              "description": "When a gap exists between the anchor and the popup element, this option will add a \"hover bridge\" that fills the\ngap using an invisible element. This makes listening for events such as `mouseenter` and `mouseleave` more sane\nbecause the pointer never technically leaves the element. The hover bridge will only be drawn when the popover is\nactive.",
              "fieldName": "hoverBridge"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-popup",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SdPopup",
            "module": "src/components/popup/popup.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-popup",
          "declaration": {
            "name": "SdPopup",
            "module": "src/components/popup/popup.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio/radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdRadio",
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "description": "Whether or not the radio is selected.",
              "attribute": "checked",
              "type": "boolean"
            },
            {
              "kind": "field",
              "name": "[CHECKED]",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "Whether or not the radio is required. If any radio is required in a group,\nall radios are implicitly required.",
              "attribute": "required"
            },
            {
              "kind": "field",
              "name": "value",
              "type": "string",
              "default": "default",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "container",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "selectionController",
              "privacy": "private",
              "readonly": true,
              "default": "new SingleSelectionController(this)"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean"
            },
            {
              "kind": "field",
              "name": "name",
              "type": "string"
            },
            {
              "kind": "method",
              "name": "[getFormValue]"
            },
            {
              "kind": "method",
              "name": "[getFormState]"
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "[createValidator]"
            },
            {
              "kind": "method",
              "name": "[getValidityAnchor]"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "\"radio\""
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "input",
              "type": {
                "text": "InputEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "description": "Whether or not the radio is selected.",
              "fieldName": "checked",
              "type": "boolean"
            },
            {
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "Whether or not the radio is required. If any radio is required in a group,\nall radios are implicitly required.",
              "fieldName": "required"
            },
            {
              "name": "value",
              "type": "string",
              "default": "default",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "radioBaseClass",
            "module": "src/components/radio/radio.ts"
          },
          "tagName": "sd-radio",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SdRadio",
          "declaration": {
            "name": "SdRadio",
            "module": "src/components/radio/radio.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-radio",
          "declaration": {
            "name": "SdRadio",
            "module": "src/components/radio/radio.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio/single-selection-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A `ReactiveController` that provides root node-scoped single selection for\r\nelements, similar to native `<input type=\"radio\">` selection.\r\n\r\nTo use, elements should add the controller and call\r\n`selectionController.handleCheckedChange()` in a getter/setter. This must\r\nbe synchronous to match native behavior.",
          "name": "SingleSelectionController",
          "members": [
            {
              "kind": "field",
              "name": "controls",
              "type": "array",
              "description": "All single selection elements in the host element's root with the same\n`name` attribute, including the host element.",
              "readonly": true,
              "items": [
                {
                  "$ref": "#/definitions/SingleSelectionElement"
                }
              ],
              "minItems": 1,
              "additionalItems": {
                "description": "An element that supports single-selection with `SingleSelectionController`.",
                "type": "object",
                "properties": {
                  "checked": {
                    "description": "Whether or not the element is selected.",
                    "type": "boolean"
                  },
                  "accessKey": {
                    "type": "string"
                  },
                  "accessKeyLabel": {
                    "type": "string"
                  },
                  "autocapitalize": {
                    "type": "string"
                  },
                  "dir": {
                    "type": "string"
                  },
                  "draggable": {
                    "type": "boolean"
                  },
                  "hidden": {
                    "type": "boolean"
                  },
                  "inert": {
                    "type": "boolean"
                  },
                  "innerText": {
                    "type": "string"
                  },
                  "lang": {
                    "type": "string"
                  },
                  "offsetHeight": {
                    "type": "number"
                  },
                  "offsetLeft": {
                    "type": "number"
                  },
                  "offsetParent": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Element"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "offsetTop": {
                    "type": "number"
                  },
                  "offsetWidth": {
                    "type": "number"
                  },
                  "outerText": {
                    "type": "string"
                  },
                  "spellcheck": {
                    "type": "boolean"
                  },
                  "title": {
                    "type": "string"
                  },
                  "translate": {
                    "type": "boolean"
                  },
                  "attributes": {
                    "type": "object",
                    "additionalProperties": false,
                    "patternProperties": {
                      "^[0-9]+$": {
                        "$ref": "#/definitions/Attr"
                      }
                    }
                  },
                  "classList": {
                    "type": "object",
                    "additionalProperties": false,
                    "patternProperties": {
                      "^[0-9]+$": {
                        "type": "string"
                      }
                    }
                  },
                  "className": {
                    "type": "string"
                  },
                  "clientHeight": {
                    "type": "number"
                  },
                  "clientLeft": {
                    "type": "number"
                  },
                  "clientTop": {
                    "type": "number"
                  },
                  "clientWidth": {
                    "type": "number"
                  },
                  "id": {
                    "type": "string"
                  },
                  "localName": {
                    "type": "string"
                  },
                  "namespaceURI": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "onfullscreenchange": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onfullscreenerror": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "outerHTML": {
                    "type": "string"
                  },
                  "ownerDocument": {
                    "$ref": "#/definitions/Document"
                  },
                  "part": {
                    "type": "object",
                    "additionalProperties": false,
                    "patternProperties": {
                      "^[0-9]+$": {
                        "type": "string"
                      }
                    }
                  },
                  "prefix": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "scrollHeight": {
                    "type": "number"
                  },
                  "scrollLeft": {
                    "type": "number"
                  },
                  "scrollTop": {
                    "type": "number"
                  },
                  "scrollWidth": {
                    "type": "number"
                  },
                  "shadowRoot": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ShadowRoot"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "slot": {
                    "type": "string"
                  },
                  "tagName": {
                    "type": "string"
                  },
                  "baseURI": {
                    "type": "string"
                  },
                  "childNodes": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ChildNode"
                    }
                  },
                  "firstChild": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ChildNode"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "isConnected": {
                    "type": "boolean"
                  },
                  "lastChild": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ChildNode"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "nextSibling": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ChildNode"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "nodeName": {
                    "type": "string"
                  },
                  "nodeType": {
                    "type": "number"
                  },
                  "nodeValue": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "parentElement": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/HTMLElement"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "parentNode": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ParentNode"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "previousSibling": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ChildNode"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "textContent": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ATTRIBUTE_NODE": {
                    "type": "number"
                  },
                  "CDATA_SECTION_NODE": {
                    "type": "number"
                  },
                  "COMMENT_NODE": {
                    "type": "number"
                  },
                  "DOCUMENT_FRAGMENT_NODE": {
                    "type": "number"
                  },
                  "DOCUMENT_NODE": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_CONTAINED_BY": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_CONTAINS": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_DISCONNECTED": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_FOLLOWING": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "type": "number"
                  },
                  "DOCUMENT_POSITION_PRECEDING": {
                    "type": "number"
                  },
                  "DOCUMENT_TYPE_NODE": {
                    "type": "number"
                  },
                  "ELEMENT_NODE": {
                    "type": "number"
                  },
                  "ENTITY_NODE": {
                    "type": "number"
                  },
                  "ENTITY_REFERENCE_NODE": {
                    "type": "number"
                  },
                  "NOTATION_NODE": {
                    "type": "number"
                  },
                  "PROCESSING_INSTRUCTION_NODE": {
                    "type": "number"
                  },
                  "TEXT_NODE": {
                    "type": "number"
                  },
                  "ariaAtomic": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaAutoComplete": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaBusy": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaChecked": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaColCount": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaColIndex": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaColSpan": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaCurrent": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaDisabled": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaExpanded": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaHasPopup": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaHidden": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaKeyShortcuts": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaLabel": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaLevel": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaLive": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaModal": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaMultiLine": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaMultiSelectable": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaOrientation": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaPlaceholder": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaPosInSet": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaPressed": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaReadOnly": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaRequired": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaRoleDescription": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaRowCount": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaRowIndex": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaRowSpan": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaSelected": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaSetSize": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaSort": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaValueMax": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaValueMin": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaValueNow": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "ariaValueText": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "innerHTML": {
                    "type": "string"
                  },
                  "nextElementSibling": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Element"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "previousElementSibling": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Element"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "childElementCount": {
                    "type": "number"
                  },
                  "children": {
                    "type": "object",
                    "additionalProperties": false,
                    "patternProperties": {
                      "^[0-9]+$": {
                        "$ref": "#/definitions/Element"
                      }
                    }
                  },
                  "firstElementChild": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Element"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "lastElementChild": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Element"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "assignedSlot": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/HTMLSlotElement"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "oncopy": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "oncut": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpaste": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "style": {
                    "type": "object",
                    "additionalProperties": false,
                    "patternProperties": {
                      "^[0-9]+$": {
                        "type": "string"
                      }
                    }
                  },
                  "contentEditable": {
                    "type": "string"
                  },
                  "enterKeyHint": {
                    "type": "string"
                  },
                  "inputMode": {
                    "type": "string"
                  },
                  "isContentEditable": {
                    "type": "boolean"
                  },
                  "onabort": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onanimationcancel": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onanimationend": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onanimationiteration": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onanimationstart": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onauxclick": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onblur": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "oncanplay": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "oncanplaythrough": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onchange": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onclick": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onclose": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "oncontextmenu": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "oncuechange": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondblclick": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondrag": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondragend": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondragenter": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondragleave": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondragover": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondragstart": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondrop": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ondurationchange": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onemptied": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onended": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onerror": {
                    "$ref": "#/definitions/OnErrorEventHandler"
                  },
                  "onfocus": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onformdata": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ongotpointercapture": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "oninput": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "oninvalid": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onkeydown": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onkeypress": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onkeyup": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onload": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onloadeddata": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onloadedmetadata": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onloadstart": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onlostpointercapture": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onmousedown": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onmouseenter": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onmouseleave": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onmousemove": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onmouseout": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onmouseover": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onmouseup": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpause": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onplay": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onplaying": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpointercancel": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpointerdown": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpointerenter": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpointerleave": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpointermove": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpointerout": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpointerover": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onpointerup": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onprogress": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onratechange": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onreset": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onresize": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onscroll": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onsecuritypolicyviolation": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onseeked": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onseeking": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onselect": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onselectionchange": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onselectstart": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onslotchange": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onstalled": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onsubmit": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onsuspend": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontimeupdate": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontoggle": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontouchcancel": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontouchend": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontouchmove": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontouchstart": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontransitioncancel": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontransitionend": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontransitionrun": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "ontransitionstart": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onvolumechange": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onwaiting": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onwebkitanimationend": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onwebkitanimationiteration": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onwebkitanimationstart": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onwebkittransitionend": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "onwheel": {
                    "anyOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "autofocus": {
                    "type": "boolean"
                  },
                  "dataset": {
                    "$ref": "#/definitions/DOMStringMap"
                  },
                  "nonce": {
                    "type": "string"
                  },
                  "tabIndex": {
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": "boolean",
              "privacy": "private",
              "default": false
            },
            {
              "kind": "field",
              "name": "root",
              "type": {
                "text": "ParentNode | null"
              },
              "privacy": "private",
              "default": null,
              "anyOf": [
                {
                  "$ref": "#/definitions/ParentNode"
                },
                {
                  "type": "null"
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "method",
              "name": "handleCheckedChange",
              "description": "Should be called whenever the host's `checked` property changes\r\nsynchronously."
            },
            {
              "kind": "field",
              "name": "handleFocusIn",
              "privacy": "private",
              "readonly": true,
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "handleFocusOut",
              "privacy": "private",
              "readonly": true,
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "method",
              "name": "uncheckSiblings",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateTabIndices",
              "privacy": "private",
              "description": "Updates the `tabindex` of the host and its siblings."
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "readonly": true,
              "description": "Handles arrow key events from the host. Using the arrow keys will\nselect and check the next or previous sibling with the host's\n`name` attribute.",
              "type": "object",
              "additionalProperties": false
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SingleSelectionController",
          "declaration": {
            "name": "SingleSelectionController",
            "module": "src/components/radio/single-selection-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/rating/rating.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdRating",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": "string",
              "default": "",
              "description": "The name attribute of the radio `input` elements.\nThis input `name` should be unique within the page.\nBeing unique within a form is insufficient since the `name` is used to generated IDs.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": "boolean",
              "default": false,
              "description": "Removes all hover effects and pointer events.",
              "attribute": "readonly"
            },
            {
              "kind": "field",
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The label to display beside the rating.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The size of the component.",
              "attribute": "size",
              "enum": [
                "medium",
                "small"
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "If `true`, the component is disabled.",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "defaultvalue",
              "type": "number",
              "default": 0,
              "description": "The default value. Use when the component is not controlled.",
              "attribute": "defaultvalue"
            },
            {
              "kind": "field",
              "name": "max",
              "type": "number",
              "default": 5,
              "description": "Maximum rating.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "precision",
              "type": "number",
              "default": 1,
              "description": "define the minimum increment value change allowed.",
              "attribute": "precision"
            },
            {
              "kind": "field",
              "name": "onChange",
              "description": "Callback fired when the value changes.",
              "parameters": [
                {
                  "description": "The event source of the callback.",
                  "name": "event",
                  "type": {
                    "text": "React.SyntheticEvent"
                  }
                },
                {
                  "description": "The new value.",
                  "name": "value",
                  "type": {
                    "text": "number|null"
                  }
                }
              ],
              "attribute": "onChange",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "onHoverChange",
              "description": "Callback function that is fired when the hover state changes.",
              "parameters": [
                {
                  "description": "The event source of the callback.",
                  "name": "event",
                  "type": {
                    "text": "React.SyntheticEvent"
                  }
                },
                {
                  "description": "The new value.",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "attribute": "onHoverChange",
              "type": "object",
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "value",
              "type": "number",
              "privacy": "protected",
              "default": 0,
              "description": "The rating value."
            },
            {
              "kind": "method",
              "name": "_renderRatingChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderIcons",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": "string",
              "default": "",
              "description": "The name attribute of the radio `input` elements.\nThis input `name` should be unique within the page.\nBeing unique within a form is insufficient since the `name` is used to generated IDs.",
              "fieldName": "name"
            },
            {
              "name": "readonly",
              "type": "boolean",
              "default": false,
              "description": "Removes all hover effects and pointer events.",
              "fieldName": "readonly"
            },
            {
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The label to display beside the rating.",
              "fieldName": "label"
            },
            {
              "name": "size",
              "type": "string",
              "default": "medium",
              "description": "The size of the component.",
              "fieldName": "size",
              "enum": [
                "medium",
                "small"
              ]
            },
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "If `true`, the component is disabled.",
              "fieldName": "disabled"
            },
            {
              "name": "defaultvalue",
              "type": "number",
              "default": 0,
              "description": "The default value. Use when the component is not controlled.",
              "fieldName": "defaultvalue"
            },
            {
              "name": "max",
              "type": "number",
              "default": 5,
              "description": "Maximum rating.",
              "fieldName": "max"
            },
            {
              "name": "precision",
              "type": "number",
              "default": 1,
              "description": "define the minimum increment value change allowed.",
              "fieldName": "precision"
            },
            {
              "name": "onChange",
              "description": "Callback fired when the value changes.",
              "parameters": [
                {
                  "description": "The event source of the callback.",
                  "name": "event",
                  "type": {
                    "text": "React.SyntheticEvent"
                  }
                },
                {
                  "description": "The new value.",
                  "name": "value",
                  "type": {
                    "text": "number|null"
                  }
                }
              ],
              "fieldName": "onChange",
              "type": "object",
              "additionalProperties": false
            },
            {
              "name": "onHoverChange",
              "description": "Callback function that is fired when the hover state changes.",
              "parameters": [
                {
                  "description": "The event source of the callback.",
                  "name": "event",
                  "type": {
                    "text": "React.SyntheticEvent"
                  }
                },
                {
                  "description": "The new value.",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "fieldName": "onHoverChange",
              "type": "object",
              "additionalProperties": false
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sd-rating",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SdRating",
          "declaration": {
            "name": "SdRating",
            "module": "src/components/rating/rating.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-rating",
          "declaration": {
            "name": "SdRating",
            "module": "src/components/rating/rating.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/searchBar/search-bar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdSearchBar",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "invert",
              "type": "boolean",
              "default": false,
              "attribute": "invert"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": "string",
              "default": "Search ...",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": "string",
              "default": "",
              "attribute": "defaultValue"
            },
            {
              "kind": "field",
              "name": "size",
              "type": "string",
              "default": "default",
              "attribute": "size",
              "enum": [
                "default",
                "small"
              ]
            },
            {
              "kind": "method",
              "name": "_searchChanged",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_deleteSearch",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "fieldName": "disabled"
            },
            {
              "name": "invert",
              "type": "boolean",
              "default": false,
              "fieldName": "invert"
            },
            {
              "name": "placeholder",
              "type": "string",
              "default": "Search ...",
              "fieldName": "placeholder"
            },
            {
              "name": "defaultValue",
              "type": "string",
              "default": "",
              "fieldName": "defaultValue"
            },
            {
              "name": "size",
              "type": "string",
              "default": "default",
              "fieldName": "size",
              "enum": [
                "default",
                "small"
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sd-search-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SdSearchBar",
          "declaration": {
            "name": "SdSearchBar",
            "module": "src/components/searchBar/search-bar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-search-bar",
          "declaration": {
            "name": "SdSearchBar",
            "module": "src/components/searchBar/search-bar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/switch/switch.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Switch",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "checked",
              "type": "boolean",
              "default": false,
              "attribute": "checked"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "fieldName": "disabled"
            },
            {
              "name": "checked",
              "type": "boolean",
              "default": false,
              "fieldName": "checked"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sd-switch",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Switch",
          "declaration": {
            "name": "Switch",
            "module": "src/components/switch/switch.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-switch",
          "declaration": {
            "name": "Switch",
            "module": "src/components/switch/switch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/textInput/text-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdInput",
          "members": [
            {
              "kind": "method",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, {\r\n        assumeInteractionOn: [\"sd-blur\", \"sd-input\"],\r\n    })",
              "description": "A reactive controller to allow form controls to participate in form submission, validation, etc.",
              "type": "object",
              "properties": {
                "host": {},
                "form": {
                  "anyOf": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "patternProperties": {
                        "^[0-9]+$": {
                          "$ref": "#/definitions/Element"
                        }
                      }
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "options": {
                  "$ref": "#/definitions/FormControlControllerOptions"
                },
                "handleFormData": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handleFormSubmit": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handleFormReset": {
                  "type": "object",
                  "additionalProperties": false
                },
                "handleInteraction": {
                  "type": "object",
                  "additionalProperties": false
                },
                "checkFormValidity": {
                  "type": "object",
                  "additionalProperties": false
                },
                "reportFormValidity": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "type",
              "type": "string",
              "default": "text",
              "description": "The `<input>` type to use, defaults to \"text\". The type greatly changes how\nthe text field behaves.\n\nText fields support a limited number of `<input>` types:\n\n- text\n- email\n- number\n- password\n- search\n- tel\n- url\n- date\n- datetime-local\n- time",
              "attribute": "type",
              "reflects": true,
              "enum": [
                "color",
                "email",
                "file",
                "month",
                "number",
                "password",
                "search",
                "tel",
                "text",
                "url",
                "week"
              ]
            },
            {
              "kind": "field",
              "name": "name",
              "type": "string",
              "default": "",
              "description": "The name of the input, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "error",
              "type": "boolean",
              "default": false,
              "description": "Gets or sets whether or not the text field is in a visually invalid state.\n\nThis error state overrides the error state controlled by\n`reportValidity()`.",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "errorText",
              "type": "string",
              "default": "",
              "description": "The error message that replaces supporting text when `error` is true. If\n`errorText` is an empty string, then the supporting text will continue to\nshow.\n\nThis error message overrides the error message displayed by\n`reportValidity()`.",
              "attribute": "error-text"
            },
            {
              "kind": "field",
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The input's label. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "noAsterisk",
              "type": "boolean",
              "default": false,
              "description": "Disables the asterisk on the label, when the text field is required.",
              "attribute": "no-asterisk"
            },
            {
              "kind": "field",
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "Makes the input a required field. Additionally the floating label will render an asterisk \"*\" when true.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": "string",
              "default": "",
              "description": "The current value of the input, submitted as a name/value pair with form data.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": "string",
              "default": "",
              "description": "The input's help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": "boolean",
              "default": false,
              "description": "Adds a clear button when the input is not empty.",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the input.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "type": "string",
              "description": "Defines the greatest value in the range of permitted values.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "maxLength",
              "type": "number",
              "description": "The maximum number of characters a user can enter into the text field. Set\nto -1 for none.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength",
              "attribute": "maxLength"
            },
            {
              "kind": "field",
              "name": "min",
              "type": "string",
              "description": "Defines the most negative value in the range of permitted values.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "minLength",
              "type": "number",
              "description": "The minimum number of characters a user can enter into the text field. Set\nto -1 for none.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength",
              "attribute": "minLength"
            },
            {
              "kind": "field",
              "name": "noSpinner",
              "type": "boolean",
              "default": false,
              "description": "Hides the browser's built-in increment/decrement spin buttons for number inputs.",
              "attribute": "no-spinner"
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": "string",
              "description": "A regular expression pattern to validate input against.",
              "attribute": "pattern"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": "string",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": "boolean",
              "default": false,
              "description": "Makes the input readonly.",
              "attribute": "readOnly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "passwordToggle",
              "type": "boolean",
              "default": false,
              "description": "Adds a button to toggle the password's visibility. Only applies to password types.",
              "attribute": "password-toggle"
            },
            {
              "kind": "field",
              "name": "passwordVisible",
              "type": "boolean",
              "default": false,
              "description": "Determines whether or not the password is currently visible. Only applies to password input types.",
              "attribute": "password-visible"
            },
            {
              "kind": "field",
              "name": "autoCapitalize",
              "type": "string",
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "attribute": "autoCapitalize",
              "enum": [
                "characters",
                "none",
                "off",
                "on",
                "sentences",
                "words"
              ]
            },
            {
              "kind": "field",
              "name": "autoCorrect",
              "type": "string",
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "attribute": "autoCorrect",
              "enum": [
                "off",
                "on"
              ]
            },
            {
              "kind": "field",
              "name": "autoFocus",
              "type": "boolean",
              "default": false,
              "description": "Indicates that the input should receive focus on page load.",
              "attribute": "autoFocus"
            },
            {
              "kind": "field",
              "name": "enterkeyhint",
              "type": "string",
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "attribute": "enterkeyhint",
              "enum": [
                "done",
                "enter",
                "go",
                "next",
                "previous",
                "search",
                "send"
              ]
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": "boolean",
              "default": true,
              "description": "Enables spell checking on the input.",
              "attribute": "spellcheck"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": "string",
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\nkeyboard on supportive devices.",
              "attribute": "inputmode",
              "enum": [
                "decimal",
                "email",
                "none",
                "numeric",
                "search",
                "tel",
                "text",
                "url"
              ]
            },
            {
              "kind": "field",
              "name": "form_id",
              "type": "string",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "attribute": "form_id",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": "boolean",
              "default": false,
              "description": "Indicates that input accepts multiple email addresses.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#multiple",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number | \"any\" | undefined"
              },
              "description": "Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\nimplied, allowing any numeric value. Only applies to date and number input types.",
              "attribute": "step",
              "anyOf": [
                {
                  "enum": [
                    "any"
                  ],
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": "string",
              "description": "Describes what, if any, type of autocomplete functionality the input\nshould provide.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete",
              "attribute": "autocomplete",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dirty",
              "type": "boolean",
              "privacy": "private",
              "default": false,
              "description": "Returns true when the text field has been interacted with. Native\nvalidation errors only display in response to user interactions."
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": "boolean",
              "privacy": "private",
              "default": false
            },
            {
              "kind": "field",
              "name": "nativeError",
              "type": "boolean",
              "privacy": "private",
              "default": false,
              "description": "Whether or not a native error has been reported via `reportValidity()`."
            },
            {
              "kind": "field",
              "name": "nativeErrorText",
              "type": "string",
              "privacy": "private",
              "default": "",
              "description": "The validation message displayed from a native error via\n`reportValidity()`."
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "getInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selectionDirection",
              "description": "Gets or sets the direction in which selection occurred.",
              "anyOf": [
                {
                  "enum": [
                    "backward",
                    "forward",
                    "none"
                  ],
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            },
            {
              "kind": "field",
              "name": "selectionEnd",
              "description": "Gets or sets the end position or offset of a text selection.",
              "type": [
                "null",
                "number"
              ]
            },
            {
              "kind": "field",
              "name": "selectionStart",
              "description": "Gets or sets the starting position or offset of a text selection.",
              "type": [
                "null",
                "number"
              ]
            },
            {
              "kind": "field",
              "name": "valueAsNumber",
              "description": "The text field's value as a number.",
              "type": "number"
            },
            {
              "kind": "field",
              "name": "valueAsDate",
              "description": "The text field's value as a Date.",
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ]
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true,
              "type": "object",
              "properties": {
                "badInput": {
                  "type": "boolean"
                },
                "customError": {
                  "type": "boolean"
                },
                "patternMismatch": {
                  "type": "boolean"
                },
                "rangeOverflow": {
                  "type": "boolean"
                },
                "rangeUnderflow": {
                  "type": "boolean"
                },
                "stepMismatch": {
                  "type": "boolean"
                },
                "tooLong": {
                  "type": "boolean"
                },
                "tooShort": {
                  "type": "boolean"
                },
                "typeMismatch": {
                  "type": "boolean"
                },
                "valid": {
                  "type": "boolean"
                },
                "valueMissing": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true,
              "type": "string"
            },
            {
              "kind": "field",
              "name": "hasError",
              "privacy": "private",
              "readonly": true,
              "type": "boolean"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePasswordToggle",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the input."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the input."
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the text field.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select"
            },
            {
              "kind": "method",
              "name": "getErrorText",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Replaces a range of text with a new string."
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionMode",
                  "optional": true,
                  "type": {
                    "text": "SelectionMode"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number | null"
                  },
                  "description": "The offset into the text field for the start of the selection."
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number | null"
                  },
                  "description": "The offset into the text field for the end of the selection."
                },
                {
                  "name": "direction",
                  "optional": true,
                  "type": {
                    "text": "\"forward\" | \"backward\" | \"none\""
                  },
                  "description": "The direction in which the selection is performed."
                }
              ],
              "description": "Sets the start and end positions of the text selection (0-based)."
            },
            {
              "kind": "method",
              "name": "stepDown",
              "parameters": [
                {
                  "name": "stepDecrement",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "The number of steps to decrement, defaults to 1."
                }
              ],
              "description": "Decrements the value of a numeric input type by the value of the step attribute."
            },
            {
              "kind": "method",
              "name": "stepUp",
              "parameters": [
                {
                  "name": "stepIncrement",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "The number of steps to increment, defaults to 1."
                }
              ],
              "description": "Increments the value of a numeric input type by the value of the step attribute."
            },
            {
              "kind": "method",
              "name": "showPicker",
              "description": "Displays the browser picker for an input element (only works if the browser supports it for the input type)."
            },
            {
              "kind": "method",
              "name": "reset",
              "description": "Reset the text field to its default value."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form, if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleStepChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderClearIcon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderPasswordToggle",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderErrorText",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderHelpText",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": "string",
              "default": "text",
              "description": "The `<input>` type to use, defaults to \"text\". The type greatly changes how\nthe text field behaves.\n\nText fields support a limited number of `<input>` types:\n\n- text\n- email\n- number\n- password\n- search\n- tel\n- url\n- date\n- datetime-local\n- time",
              "fieldName": "type",
              "enum": [
                "color",
                "email",
                "file",
                "month",
                "number",
                "password",
                "search",
                "tel",
                "text",
                "url",
                "week"
              ]
            },
            {
              "name": "name",
              "type": "string",
              "default": "",
              "description": "The name of the input, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "error",
              "type": "boolean",
              "default": false,
              "description": "Gets or sets whether or not the text field is in a visually invalid state.\n\nThis error state overrides the error state controlled by\n`reportValidity()`.",
              "fieldName": "error"
            },
            {
              "name": "error-text",
              "type": "string",
              "default": "",
              "description": "The error message that replaces supporting text when `error` is true. If\n`errorText` is an empty string, then the supporting text will continue to\nshow.\n\nThis error message overrides the error message displayed by\n`reportValidity()`.",
              "fieldName": "errorText"
            },
            {
              "name": "label",
              "type": "string",
              "default": "",
              "description": "The input's label. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "no-asterisk",
              "type": "boolean",
              "default": false,
              "description": "Disables the asterisk on the label, when the text field is required.",
              "fieldName": "noAsterisk"
            },
            {
              "name": "required",
              "type": "boolean",
              "default": false,
              "description": "Makes the input a required field. Additionally the floating label will render an asterisk \"*\" when true.",
              "fieldName": "required"
            },
            {
              "name": "value",
              "type": "string",
              "default": "",
              "description": "The current value of the input, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "help-text",
              "type": "string",
              "default": "",
              "description": "The input's help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "clearable",
              "type": "boolean",
              "default": false,
              "description": "Adds a clear button when the input is not empty.",
              "fieldName": "clearable"
            },
            {
              "name": "disabled",
              "type": "boolean",
              "default": false,
              "description": "Disables the input.",
              "fieldName": "disabled"
            },
            {
              "name": "max",
              "type": "string",
              "description": "Defines the greatest value in the range of permitted values.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max",
              "fieldName": "max"
            },
            {
              "name": "maxLength",
              "type": "number",
              "description": "The maximum number of characters a user can enter into the text field. Set\nto -1 for none.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength",
              "fieldName": "maxLength"
            },
            {
              "name": "min",
              "type": "string",
              "description": "Defines the most negative value in the range of permitted values.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min",
              "fieldName": "min"
            },
            {
              "name": "minLength",
              "type": "number",
              "description": "The minimum number of characters a user can enter into the text field. Set\nto -1 for none.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength",
              "fieldName": "minLength"
            },
            {
              "name": "no-spinner",
              "type": "boolean",
              "default": false,
              "description": "Hides the browser's built-in increment/decrement spin buttons for number inputs.",
              "fieldName": "noSpinner"
            },
            {
              "name": "pattern",
              "type": "string",
              "description": "A regular expression pattern to validate input against.",
              "fieldName": "pattern"
            },
            {
              "name": "placeholder",
              "type": "string",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "readOnly",
              "type": "boolean",
              "default": false,
              "description": "Makes the input readonly.",
              "fieldName": "readOnly"
            },
            {
              "name": "password-toggle",
              "type": "boolean",
              "default": false,
              "description": "Adds a button to toggle the password's visibility. Only applies to password types.",
              "fieldName": "passwordToggle"
            },
            {
              "name": "password-visible",
              "type": "boolean",
              "default": false,
              "description": "Determines whether or not the password is currently visible. Only applies to password input types.",
              "fieldName": "passwordVisible"
            },
            {
              "name": "autoCapitalize",
              "type": "string",
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "fieldName": "autoCapitalize",
              "enum": [
                "characters",
                "none",
                "off",
                "on",
                "sentences",
                "words"
              ]
            },
            {
              "name": "autoCorrect",
              "type": "string",
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "fieldName": "autoCorrect",
              "enum": [
                "off",
                "on"
              ]
            },
            {
              "name": "autoFocus",
              "type": "boolean",
              "default": false,
              "description": "Indicates that the input should receive focus on page load.",
              "fieldName": "autoFocus"
            },
            {
              "name": "enterkeyhint",
              "type": "string",
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "fieldName": "enterkeyhint",
              "enum": [
                "done",
                "enter",
                "go",
                "next",
                "previous",
                "search",
                "send"
              ]
            },
            {
              "name": "spellcheck",
              "type": "boolean",
              "default": true,
              "description": "Enables spell checking on the input.",
              "fieldName": "spellcheck"
            },
            {
              "name": "inputmode",
              "type": "string",
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\nkeyboard on supportive devices.",
              "fieldName": "inputmode",
              "enum": [
                "decimal",
                "email",
                "none",
                "numeric",
                "search",
                "tel",
                "text",
                "url"
              ]
            },
            {
              "name": "form_id",
              "type": "string",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\nthe same document or shadow root for this to work.",
              "fieldName": "form_id"
            },
            {
              "name": "multiple",
              "type": "boolean",
              "default": false,
              "description": "Indicates that input accepts multiple email addresses.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#multiple",
              "fieldName": "multiple"
            },
            {
              "name": "step",
              "type": {
                "text": "number | \"any\" | undefined"
              },
              "description": "Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\nimplied, allowing any numeric value. Only applies to date and number input types.",
              "fieldName": "step",
              "anyOf": [
                {
                  "enum": [
                    "any"
                  ],
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            },
            {
              "name": "autocomplete",
              "type": "string",
              "description": "Describes what, if any, type of autocomplete functionality the input\nshould provide.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete",
              "fieldName": "autocomplete"
            }
          ],
          "superclass": {
            "name": "SdElement",
            "module": "/src/utils/sd-element.js"
          },
          "tagName": "sd-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SdInput",
          "declaration": {
            "name": "SdInput",
            "module": "src/components/textInput/text-input.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-input",
          "declaration": {
            "name": "SdInput",
            "module": "src/components/textInput/text-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/topBar/top-bar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SdTopBar",
          "members": [
            {
              "kind": "field",
              "name": "expanded",
              "type": "boolean",
              "privacy": "private",
              "default": false
            },
            {
              "kind": "method",
              "name": "_sidebarControl",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sd-top-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SdTopBar",
          "declaration": {
            "name": "SdTopBar",
            "module": "src/components/topBar/top-bar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sd-top-bar",
          "declaration": {
            "name": "SdTopBar",
            "module": "src/components/topBar/top-bar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/internal/card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Card",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Card",
          "declaration": {
            "name": "Card",
            "module": "src/components/card/internal/card.ts"
          }
        }
      ]
    }
  ]
}
